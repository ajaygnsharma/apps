<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\EIT.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\EIT.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, RVCT3.1 [Build 939]: Last Updated: Tue Dec 09 15:36:58 2008
<BR><P>
<H3>Maximum Stack Usage =       2352 bytes + Unknown(Functions without stacksize, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; main_task &rArr; mn_server &rArr; mn_app_server_idle &rArr; isvr_condition_alarm &rArr; send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d33430]">Reset_Handler</a>
 <LI><a href="#[d33478]">__user_initial_stackheap</a>
 <LI><a href="#[d24210]">K_OS_Disable_Interrupts</a>
 <LI><a href="#[d241c8]">K_OS_Enable_Interrupts</a>
 <LI><a href="#[d33238]">Undef_Wrapper</a>
 <LI><a href="#[d332c8]">PAbt_Wrapper</a>
 <LI><a href="#[d333e8]">DAbt_Wrapper</a>
 <LI><a href="#[d33280]">SWI_Wrapper</a>
 <LI><a href="#[d33310]">IRQ_Wrapper</a>
 <LI><a href="#[d333a0]">FIQ_Wrapper</a>
 <LI><a href="#[d32f80]">irq_ack</a>
</UL>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d33430]">Reset_Handler</a>
 <LI><a href="#[d33238]">Undef_Wrapper</a>
 <LI><a href="#[d33280]">SWI_Wrapper</a>
 <LI><a href="#[d332c8]">PAbt_Wrapper</a>
 <LI><a href="#[d333e8]">DAbt_Wrapper</a>
 <LI><a href="#[d33310]">IRQ_Wrapper</a>
 <LI><a href="#[d333a0]">FIQ_Wrapper</a>
 <LI><a href="#[2e1a0c0]">__main</a>
 <LI><a href="#[2e13a90]">__ARM_get_argv</a>
 <LI><a href="#[289a3c0]">main_func</a>
 <LI><a href="#[2899fd0]">post_admin</a>
 <LI><a href="#[289a1c8]">network_func</a>
 <LI><a href="#[2899b50]">post_network</a>
 <LI><a href="#[2899910]">post_serial</a>
 <LI><a href="#[2899e20]">post_bridge</a>
 <LI><a href="#[2899b08]">post_packing</a>
 <LI><a href="#[2899b98]">post_multihost</a>
 <LI><a href="#[2899880]">post_smtpsnmp</a>
 <LI><a href="#[2899f88]">post_alarm1</a>
 <LI><a href="#[2899f40]">post_alarm2</a>
 <LI><a href="#[2899ef8]">post_alarm3</a>
 <LI><a href="#[2899eb0]">post_alarm4</a>
 <LI><a href="#[2899e68]">post_alarm5</a>
 <LI><a href="#[2899958]">post_security_admin</a>
 <LI><a href="#[28999a0]">post_security</a>
 <LI><a href="#[2899d90]">post_change_login</a>
 <LI><a href="#[2899dd8]">post_change_admin</a>
 <LI><a href="#[2899d48]">post_change_serial</a>
 <LI><a href="#[28998c8]">post_setdeviceparam</a>
 <LI><a href="#[28997a8]">post_updatedevparam</a>
 <LI><a href="#[2899d00]">post_check</a>
 <LI><a href="#[28997f0]">post_system_admin</a>
 <LI><a href="#[2899ac0]">post_rdef</a>
 <LI><a href="#[2899a30]">post_reboot</a>
 <LI><a href="#[2899c28]">post_gpio</a>
 <LI><a href="#[2899c70]">post_command</a>
 <LI><a href="#[2899520]">set_timeout_func</a>
 <LI><a href="#[2899a78]">post_read_dev</a>
 <LI><a href="#[28999e8]">post_rst_cnt</a>
 <LI><a href="#[2899be0]">post_load</a>
 <LI><a href="#[2899cb8]">post_chk_login_passwd</a>
 <LI><a href="#[2899838]">post_software</a>
 <LI><a href="#[2897708]">ssi_pswd_msg</a>
 <LI><a href="#[289a258]">model_func</a>
 <LI><a href="#[2896e08]">version_func</a>
 <LI><a href="#[289a408]">mac_func</a>
 <LI><a href="#[289a018]">port_func</a>
 <LI><a href="#[289aa38]">dhcp_func</a>
 <LI><a href="#[28992e0]">snmp_func</a>
 <LI><a href="#[289a2a0]">modbus_func</a>
 <LI><a href="#[289a570]">ip_func</a>
 <LI><a href="#[2896f70]">submask_func</a>
 <LI><a href="#[289a768]">gw_ip_func</a>
 <LI><a href="#[2898008]">ssi_dns</a>
 <LI><a href="#[289a6d8]">hname_func</a>
 <LI><a href="#[28995b0]">serial_func</a>
 <LI><a href="#[289a9f0]">dhcpflag_func</a>
 <LI><a href="#[2897750]">ssi_protocol</a>
 <LI><a href="#[289ade0]">autonegotiate_func</a>
 <LI><a href="#[2899688]">s10_func</a>
 <LI><a href="#[28996d0]">s100_func</a>
 <LI><a href="#[289a8d0]">fduplex_func</a>
 <LI><a href="#[289a720]">hduplex_func</a>
 <LI><a href="#[289ad98]">baud_func</a>
 <LI><a href="#[289abe8]">databits_func</a>
 <LI><a href="#[289a060]">parity_func</a>
 <LI><a href="#[2896fb8]">stopbit_func</a>
 <LI><a href="#[289a888]">flowcontrol_func</a>
 <LI><a href="#[289a138]">no_of_conns_func</a>
 <LI><a href="#[289a450]">lp_func</a>
 <LI><a href="#[289a918]">end_char_func</a>
 <LI><a href="#[289ad08]">buff_time_func</a>
 <LI><a href="#[289a4e0]">itimeout_func</a>
 <LI><a href="#[289a840]">fwd_endchar_func</a>
 <LI><a href="#[2897798]">ssi_pkt_len</a>
 <LI><a href="#[2898248]">ssi_connect_on</a>
 <LI><a href="#[2898050]">ssi_disconnect_by</a>
 <LI><a href="#[2898200]">ssi_connection_type</a>
 <LI><a href="#[2897678]">ssi_retry_counter</a>
 <LI><a href="#[2897630]">ssi_retry_timeout</a>
 <LI><a href="#[2897870]">ssi_mipaddr</a>
 <LI><a href="#[2897828]">ssi_multi_port</a>
 <LI><a href="#[289afd8]">WebPort_func</a>
 <LI><a href="#[28972d0]">ssi_spca</a>
 <LI><a href="#[2897000]">ssi_wsa</a>
 <LI><a href="#[2897dc8]">ssi_ica</a>
 <LI><a href="#[2897a68]">ssi_ipx</a>
 <LI><a href="#[2897900]">ssi_login</a>
 <LI><a href="#[28978b8]">ssi_login_msg</a>
 <LI><a href="#[2898488]">ssi_admin</a>
 <LI><a href="#[2898440]">ssi_admin_msg</a>
 <LI><a href="#[2897438]">ssi_serial</a>
 <LI><a href="#[28973f0]">ssi_serial_msg</a>
 <LI><a href="#[2897ca8]">ssi_ip1</a>
 <LI><a href="#[2897c60]">ssi_ip2</a>
 <LI><a href="#[2897c18]">ssi_ip3</a>
 <LI><a href="#[2897bd0]">ssi_ip4</a>
 <LI><a href="#[2897b88]">ssi_ip5</a>
 <LI><a href="#[2897b40]">ssi_ip6</a>
 <LI><a href="#[2897af8]">ssi_ip7</a>
 <LI><a href="#[2897ab0]">ssi_ip8</a>
 <LI><a href="#[28973a8]">ssi_smtp</a>
 <LI><a href="#[2897360]">ssi_smtpip</a>
 <LI><a href="#[2897ee8]">ssi_from</a>
 <LI><a href="#[2897288]">ssi_sub</a>
 <LI><a href="#[2897318]">ssi_snmp_en</a>
 <LI><a href="#[2897168]">ssi_trap_en</a>
 <LI><a href="#[2897120]">ssi_trap_ip</a>
 <LI><a href="#[28981b8]">ssi_contact</a>
 <LI><a href="#[2897948]">ssi_location</a>
 <LI><a href="#[2898290]">ssi_community</a>
 <LI><a href="#[2899208]">ssi_a1_e_chk</a>
 <LI><a href="#[2899058]">ssi_a1_t_chk</a>
 <LI><a href="#[2899298]">ssi_a1_c1</a>
 <LI><a href="#[2899250]">ssi_a1_c2</a>
 <LI><a href="#[28990a0]">ssi_a1_sspd</a>
 <LI><a href="#[28991c0]">ssi_a1_ic_evt</a>
 <LI><a href="#[28990e8]">ssi_a1_sic_evt</a>
 <LI><a href="#[2899130]">ssi_a1_ri</a>
 <LI><a href="#[2899010]">ssi_a1_to</a>
 <LI><a href="#[2899178]">ssi_a1_msg</a>
 <LI><a href="#[2898f38]">ssi_a2_e_chk</a>
 <LI><a href="#[2898d88]">ssi_a2_t_chk</a>
 <LI><a href="#[2898fc8]">ssi_a2_c1</a>
 <LI><a href="#[2898f80]">ssi_a2_c2</a>
 <LI><a href="#[2898dd0]">ssi_a2_sspd</a>
 <LI><a href="#[2898ef0]">ssi_a2_ic_evt</a>
 <LI><a href="#[2898e18]">ssi_a2_sic_evt</a>
 <LI><a href="#[2898e60]">ssi_a2_ri</a>
 <LI><a href="#[2898d40]">ssi_a2_to</a>
 <LI><a href="#[2898ea8]">ssi_a2_msg</a>
 <LI><a href="#[2898c68]">ssi_a3_e_chk</a>
 <LI><a href="#[2898ab8]">ssi_a3_t_chk</a>
 <LI><a href="#[2898cf8]">ssi_a3_c1</a>
 <LI><a href="#[2898cb0]">ssi_a3_c2</a>
 <LI><a href="#[2898b00]">ssi_a3_sspd</a>
 <LI><a href="#[2898c20]">ssi_a3_ic_evt</a>
 <LI><a href="#[2898b48]">ssi_a3_sic_evt</a>
 <LI><a href="#[2898b90]">ssi_a3_ri</a>
 <LI><a href="#[2898a70]">ssi_a3_to</a>
 <LI><a href="#[2898bd8]">ssi_a3_msg</a>
 <LI><a href="#[2898998]">ssi_a4_e_chk</a>
 <LI><a href="#[28987e8]">ssi_a4_t_chk</a>
 <LI><a href="#[2898a28]">ssi_a4_c1</a>
 <LI><a href="#[28989e0]">ssi_a4_c2</a>
 <LI><a href="#[2898830]">ssi_a4_sspd</a>
 <LI><a href="#[2898950]">ssi_a4_ic_evt</a>
 <LI><a href="#[2898878]">ssi_a4_sic_evt</a>
 <LI><a href="#[28988c0]">ssi_a4_ri</a>
 <LI><a href="#[28987a0]">ssi_a4_to</a>
 <LI><a href="#[2898908]">ssi_a4_msg</a>
 <LI><a href="#[28986c8]">ssi_a5_e_chk</a>
 <LI><a href="#[2898518]">ssi_a5_t_chk</a>
 <LI><a href="#[2898758]">ssi_a5_c1</a>
 <LI><a href="#[2898710]">ssi_a5_c2</a>
 <LI><a href="#[2898560]">ssi_a5_sspd</a>
 <LI><a href="#[2898680]">ssi_a5_ic_evt</a>
 <LI><a href="#[28985a8]">ssi_a5_sic_evt</a>
 <LI><a href="#[28985f0]">ssi_a5_ri</a>
 <LI><a href="#[28984d0]">ssi_a5_to</a>
 <LI><a href="#[2898638]">ssi_a5_msg</a>
 <LI><a href="#[289ab58]">dev_all_func</a>
 <LI><a href="#[28993b8]">show_unit_num_func</a>
 <LI><a href="#[2899448]">show_idnum_func</a>
 <LI><a href="#[2899400]">show_name_func</a>
 <LI><a href="#[2899490]">show_cmd_func</a>
 <LI><a href="#[2899370]">show_units_func</a>
 <LI><a href="#[289ab10]">dev_read_func</a>
 <LI><a href="#[28983f8]">ssi_chkd_devs</a>
 <LI><a href="#[28971b0]">ssi_timeout_select</a>
 <LI><a href="#[2897990]">ssi_load_timeout</a>
 <LI><a href="#[28979d8]">ssi_load_on</a>
 <LI><a href="#[28975a0]">ssi_rs485txrx</a>
 <LI><a href="#[2898320]">ssi_cio</a>
 <LI><a href="#[2897480]">ssi_s_no</a>
 <LI><a href="#[2897e10]">ssi_i_chk</a>
 <LI><a href="#[2897f30]">ssi_fio_status</a>
 <LI><a href="#[28977e0]">ssi_o_chk</a>
 <LI><a href="#[2897e58]">ssi_h_chk</a>
 <LI><a href="#[2897a20]">ssi_l_chk</a>
 <LI><a href="#[2897cf0]">ssi_image_source</a>
 <LI><a href="#[28975e8]">ssi_rs485timer</a>
 <LI><a href="#[2897558]">ssi_rs485type</a>
 <LI><a href="#[28982d8]">ssi_cio_status</a>
 <LI><a href="#[28983b0]">ssi_ci_i_chk</a>
 <LI><a href="#[2898368]">ssi_ci_o_chk</a>
 <LI><a href="#[2898170]">ssi_ct_i_chk</a>
 <LI><a href="#[2898128]">ssi_ct_o_chk</a>
 <LI><a href="#[28976c0]">ssi_response</a>
 <LI><a href="#[2897ea0]">ssi_fullserial</a>
 <LI><a href="#[28980e0]">ssi_cts</a>
 <LI><a href="#[2897510]">ssi_rts</a>
 <LI><a href="#[2897fc0]">ssi_dsr</a>
 <LI><a href="#[2898098]">ssi_dcd</a>
 <LI><a href="#[2897f78]">ssi_dtr</a>
 <LI><a href="#[28974c8]">ssi_rx_bytes</a>
 <LI><a href="#[28970d8]">ssi_tx_bytes</a>
 <LI><a href="#[2897240]">ssi_tcp_rx_bytes</a>
 <LI><a href="#[28971f8]">ssi_tcp_tx_bytes</a>
 <LI><a href="#[2897090]">ssi_udp_rx_bytes</a>
 <LI><a href="#[2897048]">ssi_udp_tx_bytes</a>
 <LI><a href="#[2897d80]">ssi_icmp_rx_bytes</a>
 <LI><a href="#[2897d38]">ssi_icmp_tx_bytes</a>
 <LI><a href="#[2a4cfc0]">timer_isr</a>
 <LI><a href="#[2c431c8]">Timer2Handler</a>
 <LI><a href="#[2c43210]">Timer3Handler</a>
 <LI><a href="#[28d62a8]">uart1_handler</a>
 <LI><a href="#[28d6260]">uart0_handler</a>
 <LI><a href="#[28d6260]">uart0_handler</a>
 <LI><a href="#[28a03b8]">fputc</a>
 <LI><a href="#[2e17b60]">_sputc</a>
 <LI><a href="#[2e17920]">_sgetc</a>
 <LI><a href="#[2e178d8]">_sbackspace</a>
 <LI><a href="#[28c1d08]">main</a>
 <LI><a href="#[2e16660]">_printf_outstr_char</a>
 <LI><a href="#[2e164e8]">_printf_input_char</a>
 <LI><a href="#[2e174a0]">_scanf_char_input</a>
 <LI><a href="#[2e167d0]">isspace</a>
 <LI><a href="#[2e144f8]">_get_lc_ctype</a>
 <LI><a href="#[d32dd0]">cmx_undef</a>
 <LI><a href="#[d32e60]">cmx_prefetch</a>
 <LI><a href="#[d32ef0]">cmx_abort</a>
 <LI><a href="#[d32e18]">cmx_swi</a>
 <LI><a href="#[d32f80]">irq_ack</a>
 <LI><a href="#[d32ea8]">cmx_fiq</a>
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[d33430]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc2300.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[d33358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOResetInit (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[2e1a0c0]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; __rt_lib_init &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e104f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2e19278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e104f0]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2e1a0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2e104a8]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e19278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e10460]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[2e10778]"></a>__decompress</STRONG> (ARM, 92 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2e10730]"></a>__decompress1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[2e10220]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2e15848]"></a>__ARM_argv_veneer</STRONG> (ARM, 16 bytes, Stack size 0 bytes, lib_init.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[d33478]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, lpc2300.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e18cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[d32dd0]"></a>cmx_undef</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmx_isrs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> handlers.o(int_handlers)
</UL>
<P><STRONG><a name="[d32e18]"></a>cmx_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmx_isrs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> handlers.o(int_handlers)
</UL>
<P><STRONG><a name="[d32e60]"></a>cmx_prefetch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmx_isrs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> handlers.o(int_handlers)
</UL>
<P><STRONG><a name="[d32ef0]"></a>cmx_abort</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmx_isrs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmx_abort
</UL>
<BR>[Calls]<UL><LI><a href="#[d32720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> handlers.o(int_handlers)
</UL>
<P><STRONG><a name="[d32ea8]"></a>cmx_fiq</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmx_isrs.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> handlers.o(int_handlers)
</UL>
<P><STRONG><a name="[d24648]"></a>s_ip_process</STRONG> (Thumb, 142 bytes, Stack size 20 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = s_ip_process
</UL>
<BR>[Called By]<UL><LI><a href="#[2899880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_smtpsnmp
<LI><a href="#[28999a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[2899b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_multihost
<LI><a href="#[2899e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_bridge
<LI><a href="#[289a1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_func
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
</UL>

<P><STRONG><a name="[d24600]"></a>moddev_supplement</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = moddev_supplement
</UL>
<BR>[Called By]<UL><LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
</UL>

<P><STRONG><a name="[d245b8]"></a>s_mac_process</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = s_mac_process
</UL>
<BR>[Called By]<UL><LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
</UL>

<P><STRONG><a name="[d24570]"></a>mn_app_get_send_size</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mn_app_get_send_size &rArr; mn_http_process_includes &rArr; process_include_char &rArr; process_get_func &rArr; mn_gf_get_entry &rArr; mn_stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d23c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_includes
<LI><a href="#[28cff10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_memcpy_cb
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
</UL>

<P><STRONG><a name="[d24528]"></a>mn_app_init_recv</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mn_app_init_recv &rArr; mn_http_init_recv &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[d23c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_init_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
</UL>

<P><STRONG><a name="[d244e0]"></a>mn_app_recv_byte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mn_app_recv_byte &rArr; mn_http_recv_byte &rArr; mn_strnicmp_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[d23b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_recv_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
</UL>

<P><STRONG><a name="[d24498]"></a>mn_app_process_packet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664 + Unknown Stack Size
<LI>Call Chain = mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d23be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_packet
<LI><a href="#[28cfe80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_port2002_process_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
</UL>

<P><STRONG><a name="[d24450]"></a>mn_app_send_complete</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mn_app_send_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[28cfc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_send_close
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3e500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_unacked_bytes
</UL>

<P><STRONG><a name="[d24408]"></a>socket_get</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, callback.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[d243c0]"></a>socket_nfind</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = socket_nfind
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[d24378]"></a>find_remote_socket</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = find_remote_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[d24330]"></a>mn_app_server_idle</STRONG> (Thumb, 1988 bytes, Stack size 120 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2160 + Unknown Stack Size
<LI>Call Chain = mn_app_server_idle &rArr; isvr_condition_alarm &rArr; send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d23cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_find_socket
<LI><a href="#[d23d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_disconnect_alarm
<LI><a href="#[d23d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_condition_alarm
<LI><a href="#[d23dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_char_alarm
<LI><a href="#[d23e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_accessed_alarm
<LI><a href="#[d23eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_changed_alarm
<LI><a href="#[d23fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[d24180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialToEthernet
<LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[d24378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_remote_socket
<LI><a href="#[d243c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_nfind
<LI><a href="#[d24408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket_get
<LI><a href="#[d2a048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_remote_UDP_socket
<LI><a href="#[d2a090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_my_socket
<LI><a href="#[d32720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[28cfd60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_recv
<LI><a href="#[28cfda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_send
<LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[28cfe38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_close
<LI><a href="#[28cfec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2e1d810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
</UL>

<P><STRONG><a name="[d242e8]"></a>mn_app_recv_idle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, callback.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
</UL>

<P><STRONG><a name="[d242a0]"></a>mn_app_server_process_packet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, callback.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
</UL>

<P><STRONG><a name="[d24258]"></a>mh_tcp_state</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, callback.o(.text), UNUSED)

<P><STRONG><a name="[28c1de0]"></a>main_task</STRONG> (Thumb, 960 bytes, Stack size 128 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344 + Unknown Stack Size
<LI>Call Chain = main_task &rArr; mn_server &rArr; mn_app_server_idle &rArr; isvr_condition_alarm &rArr; send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d23fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[28c1690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webpages_init
<LI><a href="#[28c17b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_alarm
<LI><a href="#[28c17f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_wait_ticks
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[28c1888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open_interface
<LI><a href="#[28c18d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_init
<LI><a href="#[28c1918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_start
<LI><a href="#[28c1960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_interface
<LI><a href="#[28c19a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_assign_interface
<LI><a href="#[28c1a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cmd_buff
<LI><a href="#[28cfec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1d810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28c1d98]"></a>hardware_init</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1664 + Unknown Stack Size
<LI>Call Chain = hardware_init &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28c1768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[28c1ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
<LI><a href="#[28c1b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnInitFlashDriver
<LI><a href="#[28c1b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnClearUploadSpace
<LI><a href="#[28c1ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_default
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28c1d50]"></a>detect_model</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = detect_model &rArr; test_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[28c16d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[28c19f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28c1d08]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2352 + Unknown Stack Size
<LI>Call Chain = main &rArr; main_task &rArr; mn_server &rArr; mn_app_server_idle &rArr; isvr_condition_alarm &rArr; send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28c1c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_or_conf_mode
<LI><a href="#[28c1d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_model
<LI><a href="#[28c1d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> kernel.o(.text)
</UL>
<P><STRONG><a name="[d33358]"></a>GPIOResetInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d33430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler (via Veneer)
</UL>

<P><STRONG><a name="[28c1ac8]"></a>initUART</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, serial_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28 + Unknown Stack Size
<LI>Call Chain = initUART &rArr; rs485_init_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[28d5d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init_uart
<LI><a href="#[28d5d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_gpio_ttl_init_uart
<LI><a href="#[28d5de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_full_init_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[28d62f0]"></a>start_xmit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, serial_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = start_xmit &rArr; EthernetToSerial
</UL>
<BR>[Calls]<UL><LI><a href="#[28d6068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EthernetToSerial
</UL>
<BR>[Called By]<UL><LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[2953fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_send
<LI><a href="#[2ce3de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reading
</UL>

<P><STRONG><a name="[28d62a8]"></a>uart1_handler</STRONG> (Thumb, 394 bytes, Stack size 36 bytes, serial_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = uart1_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rs232_full_snn.o(.text)
</UL>
<P><STRONG><a name="[28d6260]"></a>uart0_handler</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, serial_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart0_handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rs485_snn.o(.text)
<LI> rs232_gpio_snn.o(.text)
</UL>
<P><STRONG><a name="[28d6218]"></a>print_all_settings</STRONG> (Thumb, 504 bytes, Stack size 304 bytes, serial_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = print_all_settings &rArr; __1printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[28d61d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_settings_mode
</UL>

<P><STRONG><a name="[28d61d0]"></a>show_settings_mode</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, serial_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = show_settings_mode &rArr; print_all_settings &rArr; __1printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d32720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[28d6218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_settings
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2e1ccf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gets
<LI><a href="#[2e1d810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_or_conf_mode
</UL>

<P><STRONG><a name="[28d6188]"></a>show_help</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, serial_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = show_help &rArr; __1printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
</UL>

<P><STRONG><a name="[28d6140]"></a>show_set_help</STRONG> (Thumb, 1208 bytes, Stack size 8 bytes, serial_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = show_set_help &rArr; __1printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
</UL>

<P><STRONG><a name="[28d60f8]"></a>show_prompt</STRONG> (Thumb, 1642 bytes, Stack size 48 bytes, serial_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = show_prompt &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d245b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mac_process
<LI><a href="#[d24648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_ip_process
<LI><a href="#[d32720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[28c1ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_default
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[28d6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_set_help
<LI><a href="#[28d6188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_help
<LI><a href="#[28d6218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_settings
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1ccf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gets
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e1d810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28d60b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console
</UL>

<P><STRONG><a name="[28d60b0]"></a>serial_console</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, serial_cfg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736 + Unknown Stack Size
<LI>Call Chain = serial_console &rArr; show_prompt &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d32720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2e1ccf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gets
<LI><a href="#[2e1d810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1c78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_or_conf_mode
</UL>

<P><STRONG><a name="[28c1690]"></a>webpages_init</STRONG> (Thumb, 5144 bytes, Stack size 8 bytes, webpages.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = webpages_init &rArr; mn_vf_set_entry &rArr; set_vf_entry &rArr; mn_stricmp_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[289a2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_set_entry
<LI><a href="#[289a330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_pf_set_entry
<LI><a href="#[289a378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_gf_set_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[28c17b0]"></a>power_on_alarm</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = power_on_alarm &rArr; send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[d23eb0]"></a>ip_changed_alarm</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = ip_changed_alarm &rArr; send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[d23e20]"></a>isvr_accessed_alarm</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = isvr_accessed_alarm &rArr; send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[d23d48]"></a>isvr_disconnect_alarm</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2016 + Unknown Stack Size
<LI>Call Chain = isvr_disconnect_alarm &rArr; send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[28abba0]"></a>test_pin_condition</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = test_pin_condition &rArr; test_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[28c16d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[d23d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_condition_alarm
</UL>

<P><STRONG><a name="[d23d90]"></a>isvr_condition_alarm</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040 + Unknown Stack Size
<LI>Call Chain = isvr_condition_alarm &rArr; send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
<LI><a href="#[28abba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pin_condition
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[d23dd8]"></a>isvr_char_alarm</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, alarm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008 + Unknown Stack Size
<LI>Call Chain = isvr_char_alarm &rArr; send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[28abb10]"></a>send_mail</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, email.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984 + Unknown Stack Size
<LI>Call Chain = send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d23fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[28a0b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_start_session
<LI><a href="#[28a0bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_send_mail
<LI><a href="#[28a0c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_end_session
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1d810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d23d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_disconnect_alarm
<LI><a href="#[d23d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_condition_alarm
<LI><a href="#[d23dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_char_alarm
<LI><a href="#[d23e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_accessed_alarm
<LI><a href="#[d23eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_changed_alarm
<LI><a href="#[28c17b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_alarm
</UL>

<P><STRONG><a name="[28a03b8]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[295f2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __0printf.o(.text)
</UL>
<P><STRONG><a name="[28a0370]"></a>fgetc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[295f338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1ccf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gets
</UL>

<P><STRONG><a name="[28a0328]"></a>ferror</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1ccf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gets
<LI><a href="#[2e1d858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[28a02e0]"></a>_ttywrch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[295f2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[28a0298]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a0298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[28a0298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[2e191e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_abort (via Veneer)
</UL>

<P><STRONG><a name="[2954058]"></a>modbus_exception</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, modbus.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28cfd60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_recv
<LI><a href="#[2953f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_return_package
<LI><a href="#[2953fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_send
</UL>

<P><STRONG><a name="[2954010]"></a>calc_crc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = calc_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[2953f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_return_package
<LI><a href="#[2953fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_send
</UL>

<P><STRONG><a name="[2953fc8]"></a>modbus_send</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = modbus_send &rArr; start_xmit &rArr; EthernetToSerial
</UL>
<BR>[Calls]<UL><LI><a href="#[28d62f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_xmit
<LI><a href="#[2954010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc
<LI><a href="#[2954058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
</UL>

<P><STRONG><a name="[2953f80]"></a>modbus_return_package</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = modbus_return_package &rArr; calc_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2954010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc
<LI><a href="#[2954058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[28cfd60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_recv
</UL>

<P><STRONG><a name="[28cfd60]"></a>modbus_recv</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, modbus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = modbus_recv &rArr; modbus_return_package &rArr; calc_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[d23fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[2953f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_return_package
<LI><a href="#[2954058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[28c1c78]"></a>data_or_conf_mode</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, data_conf_mode.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = data_or_conf_mode &rArr; serial_console &rArr; show_prompt &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28d60b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console
<LI><a href="#[28d61d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_settings_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28c1a80]"></a>init_cmd_buff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port_2002_handler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[28cfe80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_port2002_process_packet
</UL>

<P><STRONG><a name="[293dce0]"></a>check_spassword_func</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port_2002_handler.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293daa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_password
</UL>

<P><STRONG><a name="[293dc98]"></a>check_cpswd</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, port_2002_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = check_cpswd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28cfe80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_port2002_process_packet
</UL>

<P><STRONG><a name="[293dc50]"></a>print_read</STRONG> (Thumb, 1580 bytes, Stack size 520 bytes, port_2002_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = print_read &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28cfe80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_port2002_process_packet
</UL>

<P><STRONG><a name="[293dc08]"></a>check_cmd</STRONG> (Thumb, 1666 bytes, Stack size 40 bytes, port_2002_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = check_cmd &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[d245b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_mac_process
<LI><a href="#[d24600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;moddev_supplement
<LI><a href="#[d24648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_ip_process
<LI><a href="#[293da58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hname_supplement
<LI><a href="#[2e1b630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bbb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e1d370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[28cfe80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_port2002_process_packet
</UL>

<P><STRONG><a name="[28cfe80]"></a>mn_port2002_process_packet</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, port_2002_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d32720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDTInit
<LI><a href="#[28c1a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cmd_buff
<LI><a href="#[28c1ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_default
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
<LI><a href="#[293dc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_read
<LI><a href="#[293dc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cpswd
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d24498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_process_packet
</UL>

<P><STRONG><a name="[293dbc0]"></a>port2002_handler</STRONG> (Thumb, 642 bytes, Stack size 48 bytes, port_2002_handler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1872 + Unknown Stack Size
<LI>Call Chain = port2002_handler &rArr; mn_open &rArr; mn_tcp_open &rArr; tcp_recv_send &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d23cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_find_socket
<LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[28cfe38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_close
<LI><a href="#[28cfec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
</UL>

<P><STRONG><a name="[d24180]"></a>SerialToEthernet</STRONG> (Thumb, 580 bytes, Stack size 32 bytes, tcp_local_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SerialToEthernet
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[28d6068]"></a>EthernetToSerial</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tcp_local_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EthernetToSerial
</UL>
<BR>[Called By]<UL><LI><a href="#[28d62f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_xmit
</UL>

<P><STRONG><a name="[292f358]"></a>fnSaveUpload</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sw_upgrade.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = fnSaveUpload &rArr; uFileWrite &rArr; fnWriteBytesFlash &rArr; fnFlashCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[292f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite
<LI><a href="#[292f160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileCloseMime
</UL>
<BR>[Called By]<UL><LI><a href="#[d23be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_packet
<LI><a href="#[2899838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_software
</UL>

<P><STRONG><a name="[2899838]"></a>post_software</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sw_upgrade.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = post_software &rArr; fnSaveUpload &rArr; uFileWrite &rArr; fnWriteBytesFlash &rArr; fnFlashCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[292f0d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenFile
<LI><a href="#[292f1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetMimeType
<LI><a href="#[292f238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetFileType
<LI><a href="#[292f358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSaveUpload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[292f238]"></a>fnGetFileType</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ufileinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2899838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_software
</UL>

<P><STRONG><a name="[292e470]"></a>uStrEquiv</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, ufileinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uStrEquiv
</UL>
<BR>[Called By]<UL><LI><a href="#[292f1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetMimeType
</UL>

<P><STRONG><a name="[292f1f0]"></a>fnGetMimeType</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ufileinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fnGetMimeType &rArr; uStrEquiv
</UL>
<BR>[Calls]<UL><LI><a href="#[292e470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uStrEquiv
</UL>
<BR>[Called By]<UL><LI><a href="#[2899838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_software
</UL>

<P><STRONG><a name="[292e428]"></a>fnConvertName</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ufileinterface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292f0d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenFile
</UL>

<P><STRONG><a name="[292f0d0]"></a>uOpenFile</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, ufileinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uOpenFile
</UL>
<BR>[Calls]<UL><LI><a href="#[292e428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnConvertName
</UL>
<BR>[Called By]<UL><LI><a href="#[2899838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_software
</UL>

<P><STRONG><a name="[292f160]"></a>uFileCloseMime</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ufileinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = uFileCloseMime &rArr; fnWriteBytesFlash &rArr; fnFlashCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[292e1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBytesFlash
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[292f358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSaveUpload
</UL>

<P><STRONG><a name="[292e3e0]"></a>uFileErase</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ufileinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = uFileErase &rArr; fnEraseFlashSector &rArr; fnFlashCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[292e278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEraseFlashSector
</UL>
<BR>[Called By]<UL><LI><a href="#[292f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite
</UL>

<P><STRONG><a name="[292e398]"></a>uGetFileLength</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ufileinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uGetFileLength &rArr; fnGetParsFile
</UL>
<BR>[Calls]<UL><LI><a href="#[292e230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetParsFile
</UL>
<BR>[Called By]<UL><LI><a href="#[292e350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenNextMimeFile
<LI><a href="#[292f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite
</UL>

<P><STRONG><a name="[292e350]"></a>uOpenNextMimeFile</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, ufileinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uOpenNextMimeFile &rArr; uGetFileLength &rArr; fnGetParsFile
</UL>
<BR>[Calls]<UL><LI><a href="#[292e230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetParsFile
<LI><a href="#[292e398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uGetFileLength
</UL>
<BR>[Called By]<UL><LI><a href="#[292f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite
</UL>

<P><STRONG><a name="[292f118]"></a>uFileWrite</STRONG> (Thumb, 250 bytes, Stack size 48 bytes, ufileinterface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = uFileWrite &rArr; fnWriteBytesFlash &rArr; fnFlashCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[292e1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBytesFlash
<LI><a href="#[292e350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenNextMimeFile
<LI><a href="#[292e398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uGetFileLength
<LI><a href="#[292e3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileErase
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1c928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[292f358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSaveUpload
</UL>

<P><STRONG><a name="[28c1b10]"></a>fnInitFlashDriver</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utasker_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = fnInitFlashDriver
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1c928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[292e278]"></a>fnEraseFlashSector</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utasker_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = fnEraseFlashSector &rArr; fnFlashCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[292d880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFlashCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1b58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnClearUploadSpace
<LI><a href="#[292e3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileErase
</UL>

<P><STRONG><a name="[28c1b58]"></a>fnClearUploadSpace</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, utasker_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = fnClearUploadSpace &rArr; fnEraseFlashSector &rArr; fnFlashCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[292e278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEraseFlashSector
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[292e230]"></a>fnGetParsFile</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utasker_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fnGetParsFile
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[292e350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uOpenNextMimeFile
<LI><a href="#[292e398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uGetFileLength
</UL>

<P><STRONG><a name="[292e1e8]"></a>fnWriteBytesFlash</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, utasker_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = fnWriteBytesFlash &rArr; fnFlashCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[292d880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFlashCommand
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1c928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[292f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite
<LI><a href="#[292f160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileCloseMime
</UL>

<P><STRONG><a name="[28cfa00]"></a>write_all</STRONG> (Thumb, 1622 bytes, Stack size 1544 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2922100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVBTableToFlash
<LI><a href="#[29221d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fl_write
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[28997a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_updatedevparam
<LI><a href="#[2899880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_smtpsnmp
<LI><a href="#[2899910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_serial
<LI><a href="#[28999a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security
<LI><a href="#[2899b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_packing
<LI><a href="#[2899b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_multihost
<LI><a href="#[2899c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_gpio
<LI><a href="#[2899d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_check
<LI><a href="#[2899d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_serial
<LI><a href="#[2899d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_login
<LI><a href="#[2899dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_admin
<LI><a href="#[2899e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_bridge
<LI><a href="#[2899e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm5
<LI><a href="#[2899eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm4
<LI><a href="#[2899ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm3
<LI><a href="#[2899f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm2
<LI><a href="#[2899f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm1
<LI><a href="#[289a1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_func
<LI><a href="#[28c1ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_default
<LI><a href="#[28cfe80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_port2002_process_packet
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
</UL>

<P><STRONG><a name="[29222b0]"></a>assume_defaults</STRONG> (Thumb, 762 bytes, Stack size 24 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = assume_defaults &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2e1c928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[28c1ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_default
</UL>

<P><STRONG><a name="[28c1ba0]"></a>flash_write_default</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[29222b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assume_defaults
</UL>
<BR>[Called By]<UL><LI><a href="#[2899ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rdef
<LI><a href="#[28c1d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[28cfe80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_port2002_process_packet
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
</UL>

<P><STRONG><a name="[28c1768]"></a>read_flash</STRONG> (Thumb, 1740 bytes, Stack size 1544 bytes, app_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = read_flash &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2922148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVBTableFromFlash
<LI><a href="#[2922190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoint
<LI><a href="#[2922220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fl_read
<LI><a href="#[29222b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assume_defaults
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[28774a0]"></a>mn_arp_update</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = mn_arp_update &rArr; mn_arp_search_entry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2878b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_get_entry
<LI><a href="#[2878b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_search_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[2877218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_get_pkt
<LI><a href="#[2877458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_process_packet
</UL>

<P><STRONG><a name="[2877458]"></a>mn_arp_process_packet</STRONG> (Thumb, 540 bytes, Stack size 56 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2877020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_arp_packet
<LI><a href="#[2877068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_transmit_ready
<LI><a href="#[28770f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_byte
<LI><a href="#[2877188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_byte
<LI><a href="#[28771d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open_socket
<LI><a href="#[28772f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_packet
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[28774a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[286dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_recv_header
</UL>

<P><STRONG><a name="[2877410]"></a>mn_arp_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mn_arp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1c530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c18d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_init
</UL>

<P><STRONG><a name="[28773c8]"></a>mn_arp_update_timer</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mn_arp_update_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[2877380]"></a>mn_arp_lookup</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 236 + Unknown Stack Size
<LI>Call Chain = mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[28771d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open_socket
<LI><a href="#[2877218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_get_pkt
<LI><a href="#[2877260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_discard_packet
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[2878ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_send_request
<LI><a href="#[2878b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_search_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[286dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ether_start_packet
</UL>

<P><STRONG><a name="[2870ea0]"></a>mn_dhcp_init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mn_dhcp_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c18d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_init
</UL>

<P><STRONG><a name="[28c1918]"></a>mn_dhcp_start</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848 + Unknown Stack Size
<LI>Call Chain = mn_dhcp_start &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[2870e58]"></a>mn_dhcp_release</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848 + Unknown Stack Size
<LI>Call Chain = mn_dhcp_release &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_interface
</UL>

<P><STRONG><a name="[2870e10]"></a>mn_dhcp_renew</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848 + Unknown Stack Size
<LI>Call Chain = mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[2a5dfe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send
</UL>

<P><STRONG><a name="[2870dc8]"></a>mn_dhcp_update_timer</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a4cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[286dd08]"></a>mn_ether_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mn_ether_init &rArr; lpc2368_init &rArr; phy_init &rArr; mii_read &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[286dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_init
</UL>
<BR>[Called By]<UL><LI><a href="#[28c18d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_init
</UL>

<P><STRONG><a name="[286dcc0]"></a>ether_recv_header</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 172 + Unknown Stack Size
<LI>Call Chain = ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2877188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_byte
<LI><a href="#[2877260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_discard_packet
<LI><a href="#[2877458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_process_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[2877218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_get_pkt
</UL>

<P><STRONG><a name="[286dc78]"></a>mn_ether_start_packet</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[286f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;same_net_number
<LI><a href="#[286f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHWAddr
<LI><a href="#[2877068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_transmit_ready
<LI><a href="#[28770f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_byte
<LI><a href="#[2877380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_start_packet
</UL>

<P><STRONG><a name="[2877020]"></a>start_arp_packet</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = start_arp_packet &rArr; sendHWAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[286f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHWAddr
<LI><a href="#[28770f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2877458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_process_packet
<LI><a href="#[2878ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_send_request
</UL>

<P><STRONG><a name="[28620a0]"></a>mn_http_server_send</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = mn_http_server_send &rArr; mn_tcp_close &rArr; tcp_send_nodata_pkt &rArr; tcp_send_nodata_hdr &rArr; tcp_send_header &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28672c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_clear_in_use_flag
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[28cfc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_send_close
<LI><a href="#[28cfe38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2862058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_server_recv
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
</UL>

<P><STRONG><a name="[2862058]"></a>mn_http_server_recv</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = mn_http_server_recv &rArr; mn_http_server_send &rArr; mn_tcp_close &rArr; tcp_send_nodata_pkt &rArr; tcp_send_nodata_hdr &rArr; tcp_send_header &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28620a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_server_send
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
</UL>

<P><STRONG><a name="[2862010]"></a>mn_http_server_set_flag</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, http.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
</UL>

<P><STRONG><a name="[2861fc8]"></a>mn_http_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mn_http_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2861f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_http_parse
<LI><a href="#[28c18d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_init
</UL>

<P><STRONG><a name="[2861f80]"></a>mn_http_close_file</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mn_http_close_file
</UL>
<BR>[Calls]<UL><LI><a href="#[28cfc40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;page_send_close
</UL>
<BR>[Called By]<UL><LI><a href="#[2861f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_http_parse
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
</UL>

<P><STRONG><a name="[2861f38]"></a>check_http_parse</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = check_http_parse &rArr; mn_abort &rArr; mn_http_close_file
</UL>
<BR>[Calls]<UL><LI><a href="#[2861f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_close_file
<LI><a href="#[2861fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_init
<LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
</UL>

<P><STRONG><a name="[d23c70]"></a>mn_http_init_recv</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = mn_http_init_recv &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[d24528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_init_recv
</UL>

<P><STRONG><a name="[d23b98]"></a>mn_http_recv_byte</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mn_http_recv_byte &rArr; mn_strnicmp_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strnicmp_cb
<LI><a href="#[2861d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_atous_long
<LI><a href="#[2861d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_atous
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d244e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_recv_byte
</UL>

<P><STRONG><a name="[2861ef0]"></a>mn_http_set_message</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mn_http_set_message
</UL>
<BR>[Called By]<UL><LI><a href="#[d23be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_packet
</UL>

<P><STRONG><a name="[2861ea8]"></a>mn_http_set_file</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_open_file
<LI><a href="#[28671a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeHTTPHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[d23be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_packet
<LI><a href="#[2899520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout_func
<LI><a href="#[28997a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_updatedevparam
<LI><a href="#[28997f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_system_admin
<LI><a href="#[2899880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_smtpsnmp
<LI><a href="#[28998c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_setdeviceparam
<LI><a href="#[2899910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_serial
<LI><a href="#[2899958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security_admin
<LI><a href="#[28999a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[2899a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_reboot
<LI><a href="#[2899a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_read_dev
<LI><a href="#[2899ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rdef
<LI><a href="#[2899b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_packing
<LI><a href="#[2899b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_network
<LI><a href="#[2899b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_multihost
<LI><a href="#[2899be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_load
<LI><a href="#[2899c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_gpio
<LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command
<LI><a href="#[2899cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_chk_login_passwd
<LI><a href="#[2899d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_check
<LI><a href="#[2899d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_serial
<LI><a href="#[2899d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_login
<LI><a href="#[2899dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_admin
<LI><a href="#[2899e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_bridge
<LI><a href="#[2899e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm5
<LI><a href="#[2899eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm4
<LI><a href="#[2899ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm3
<LI><a href="#[2899f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm2
<LI><a href="#[2899f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm1
<LI><a href="#[2899fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_admin
<LI><a href="#[289a1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_func
<LI><a href="#[289a3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[2bafe20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_func
</UL>

<P><STRONG><a name="[d23be0]"></a>mn_http_process_packet</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mn_http_process_packet &rArr; fnSaveUpload &rArr; uFileWrite &rArr; fnWriteBytesFlash &rArr; fnFlashCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strcpy_cb
<LI><a href="#[2861cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_pf_get_entry
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[2861ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_message
<LI><a href="#[292f358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnSaveUpload
<LI><a href="#[2e19cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r1
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d24498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_process_packet
</UL>

<P><STRONG><a name="[2861e60]"></a>mn_http_decodeString</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mn_http_decodeString
</UL>
<BR>[Called By]<UL><LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
</UL>

<P><STRONG><a name="[2861e18]"></a>mn_http_find_value</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mn_http_find_value &rArr; mn_http_decodeString
</UL>
<BR>[Calls]<UL><LI><a href="#[2861e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_decodeString
</UL>
<BR>[Called By]<UL><LI><a href="#[28993b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_unit_num_func
<LI><a href="#[2899520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout_func
<LI><a href="#[28997a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_updatedevparam
<LI><a href="#[28997f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_system_admin
<LI><a href="#[2899880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_smtpsnmp
<LI><a href="#[2899910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_serial
<LI><a href="#[2899958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security_admin
<LI><a href="#[28999a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[2899b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_packing
<LI><a href="#[2899b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_multihost
<LI><a href="#[2899be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_load
<LI><a href="#[2899c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_gpio
<LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command
<LI><a href="#[2899cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_chk_login_passwd
<LI><a href="#[2899d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_check
<LI><a href="#[2899d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_serial
<LI><a href="#[2899d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_login
<LI><a href="#[2899dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_admin
<LI><a href="#[2899e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_bridge
<LI><a href="#[2899e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm5
<LI><a href="#[2899eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm4
<LI><a href="#[2899ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm3
<LI><a href="#[2899f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm2
<LI><a href="#[2899f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm1
<LI><a href="#[2899fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_admin
<LI><a href="#[289a1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_func
<LI><a href="#[289a3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
</UL>

<P><STRONG><a name="[d23c28]"></a>mn_http_process_includes</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mn_http_process_includes &rArr; process_include_char &rArr; process_get_func &rArr; mn_gf_get_entry &rArr; mn_stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28671e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_leftovers
<LI><a href="#[2867230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_include_char
</UL>
<BR>[Called By]<UL><LI><a href="#[d24570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_get_send_size
</UL>

<P><STRONG><a name="[285bb60]"></a>mn_find_interface</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mn_find_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[285bb18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_interface_init
</UL>

<P><STRONG><a name="[285bb18]"></a>mn_interface_init</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mn_interface_init &rArr; mn_find_interface
</UL>
<BR>[Calls]<UL><LI><a href="#[285bad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_recv
<LI><a href="#[285bb60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_find_interface
</UL>
<BR>[Called By]<UL><LI><a href="#[28c18d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_init
</UL>

<P><STRONG><a name="[28c19a8]"></a>mn_assign_interface</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mn_assign_interface
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[28c1888]"></a>mn_open_interface</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, intrface.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[28c1960]"></a>mn_close_interface</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, intrface.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1864 + Unknown Stack Size
<LI>Call Chain = mn_close_interface &rArr; mn_dhcp_release &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[285ba88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close
<LI><a href="#[2870e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_release
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[2a3f388]"></a>mn_ip_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mn_ip_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1c530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c18d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_init
</UL>

<P><STRONG><a name="[2877260]"></a>mn_ip_discard_packet</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = mn_ip_discard_packet &rArr; reset_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2855710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[28557a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ping_pkt
<LI><a href="#[286dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_recv_header
<LI><a href="#[2877218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_get_pkt
<LI><a href="#[2877380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_lookup
<LI><a href="#[2a3f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_icmp_recv_reply
<LI><a href="#[2a3f268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_recv
<LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
</UL>

<P><STRONG><a name="[2a3f340]"></a>mn_ip_start_packet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[286dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ether_start_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_send_header
</UL>

<P><STRONG><a name="[2a3f2f8]"></a>mn_header_checksum</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mn_header_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2855758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_recv_header
<LI><a href="#[2a3f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_send_header
</UL>

<P><STRONG><a name="[2a3f2b0]"></a>mn_ip_send_header</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_escaped_byte
<LI><a href="#[2a3f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_header_checksum
<LI><a href="#[2a3f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_start_packet
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28556c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ping_reply
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[28cfda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_send
<LI><a href="#[2b3e740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_header
</UL>

<P><STRONG><a name="[2877218]"></a>mn_ip_get_pkt</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2855710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_recv
<LI><a href="#[2855758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_recv_header
<LI><a href="#[286dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_recv_header
<LI><a href="#[2877188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_byte
<LI><a href="#[2877260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_discard_packet
<LI><a href="#[28774a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_update
<LI><a href="#[2a3f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[2877380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_lookup
<LI><a href="#[2a3f268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_recv
</UL>

<P><STRONG><a name="[2a3f268]"></a>mn_ip_recv</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = mn_ip_recv &rArr; send_ping_reply &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28556c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ping_reply
<LI><a href="#[28557a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ping_pkt
<LI><a href="#[2877218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_get_pkt
<LI><a href="#[2877260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_discard_packet
<LI><a href="#[2a3f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_escaped_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[2b3e5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_send
</UL>

<P><STRONG><a name="[2a3f220]"></a>mn_copy_recv_buff</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = mn_copy_recv_buff
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_icmp_recv_reply
<LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
</UL>

<P><STRONG><a name="[2a3f1d8]"></a>mn_icmp_recv_reply</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = mn_icmp_recv_reply &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d23cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_find_socket
<LI><a href="#[2877260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_discard_packet
<LI><a href="#[2a3f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_tcp_end_checksum
<LI><a href="#[2a3f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_socket_recv_buff_space
<LI><a href="#[2a3f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_data_send_checksum
<LI><a href="#[2a3f220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_copy_recv_buff
</UL>
<BR>[Called By]<UL><LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
</UL>

<P><STRONG><a name="[286dc30]"></a>lpc2368_init</STRONG> (Thumb, 346 bytes, Stack size 24 bytes, lpc23xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = lpc2368_init &rArr; phy_init &rArr; mii_read &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[28c17f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_wait_ticks
<LI><a href="#[2a38d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[2a38dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mii_read
</UL>
<BR>[Called By]<UL><LI><a href="#[286dd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ether_init
</UL>

<P><STRONG><a name="[2a33d18]"></a>lpc2368_send</STRONG> (Thumb, 306 bytes, Stack size 40 bytes, lpc23xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = lpc2368_send &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28772f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_packet
</UL>

<P><STRONG><a name="[2a3f190]"></a>lpc2368_recv</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lpc23xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = lpc2368_recv &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[2a38cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReleaseRxDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2877218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_get_pkt
</UL>

<P><STRONG><a name="[2a30ce0]"></a>mn_udp_tcp_start_checksum</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, mn_csum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mn_udp_tcp_start_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
<LI><a href="#[2b3e740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_header
</UL>

<P><STRONG><a name="[2a3f148]"></a>mn_data_send_checksum</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, mn_csum.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mn_data_send_checksum
</UL>
<BR>[Called By]<UL><LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[2a3f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_icmp_recv_reply
<LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
<LI><a href="#[2b3e740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_header
</UL>

<P><STRONG><a name="[2a3f028]"></a>mn_udp_tcp_end_checksum</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mn_csum.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[2a3f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_icmp_recv_reply
<LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
<LI><a href="#[2b3e740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_header
</UL>

<P><STRONG><a name="[285bad0]"></a>init_recv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mn_port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2855710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_recv
<LI><a href="#[285bb18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_interface_init
</UL>

<P><STRONG><a name="[2877068]"></a>mn_transmit_ready</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, mn_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mn_transmit_ready &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[286dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ether_start_packet
<LI><a href="#[2877458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_process_packet
<LI><a href="#[2878ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_send_request
</UL>

<P><STRONG><a name="[2a4cfc0]"></a>timer_isr</STRONG> (Thumb, 458 bytes, Stack size 16 bytes, mn_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = timer_isr &rArr; mn_update_inactivity_timers &rArr; mn_abort &rArr; mn_http_close_file
</UL>
<BR>[Calls]<UL><LI><a href="#[2870dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_update_timer
<LI><a href="#[28773c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_update_timer
<LI><a href="#[28c16d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[28c19f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir
<LI><a href="#[2a4cea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_update_inactivity_timers
<LI><a href="#[2a4cee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_tick
<LI><a href="#[2a4cf30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mn_port.o(.text)
</UL>
<P><STRONG><a name="[2a4cf78]"></a>mn_timer_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, mn_port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mn_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c18d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_init
</UL>

<P><STRONG><a name="[28772a8]"></a>mn_get_timer_tick</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, mn_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2872688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcp_packet
<LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[2878b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_get_entry
<LI><a href="#[2b17cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_init
</UL>

<P><STRONG><a name="[2877140]"></a>mn_reset_timer</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, mn_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[28772a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_get_timer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[d23c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_init_recv
<LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
<LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
<LI><a href="#[2877068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_transmit_ready
<LI><a href="#[2877380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_lookup
<LI><a href="#[28c17f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_wait_ticks
<LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[28cfe38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_close
<LI><a href="#[2a33d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_send
<LI><a href="#[2a38d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[2a38d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mii_write
<LI><a href="#[2a38dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mii_read
<LI><a href="#[2a3f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_recv
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
<LI><a href="#[2b17c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_shutdown
<LI><a href="#[2b17c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_open
<LI><a href="#[2b3e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_syn_close
</UL>

<P><STRONG><a name="[28770b0]"></a>mn_timer_expired</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mn_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = mn_timer_expired &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[28772a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_get_timer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[2861f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_http_parse
<LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
<LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
<LI><a href="#[2877068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_transmit_ready
<LI><a href="#[2877380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_lookup
<LI><a href="#[28c17f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_wait_ticks
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[2a33d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_send
<LI><a href="#[2a38d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
<LI><a href="#[2a38d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mii_write
<LI><a href="#[2a38dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mii_read
<LI><a href="#[2a3f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_recv
<LI><a href="#[2b17c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_shutdown
<LI><a href="#[2b17c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_open
</UL>

<P><STRONG><a name="[28c17f8]"></a>mn_wait_ticks</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mn_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = mn_wait_ticks &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[286dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_init
<LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[2a38d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
</UL>

<P><STRONG><a name="[28c1840]"></a>mn_server</STRONG> (Thumb, 1124 bytes, Stack size 56 bytes, mnserver.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2216 + Unknown Stack Size
<LI>Call Chain = mn_server &rArr; mn_app_server_idle &rArr; isvr_condition_alarm &rArr; send_mail &rArr; mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d23cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_find_socket
<LI><a href="#[d242a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_process_packet
<LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[285ba88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close
<LI><a href="#[2861f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_http_parse
<LI><a href="#[2862010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_server_set_flag
<LI><a href="#[2862058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_server_recv
<LI><a href="#[28620a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_server_send
<LI><a href="#[2870e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_renew
<LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[28cfda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_send
<LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[28cfec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open
<LI><a href="#[28d62f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_xmit
<LI><a href="#[293dbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port2002_handler
<LI><a href="#[2953fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_send
<LI><a href="#[2a3f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_icmp_recv_reply
<LI><a href="#[2a3f268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_recv
<LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
<LI><a href="#[2adf950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_SNMP
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[2861c20]"></a>mn_strcpy_cb</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, mnstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mn_strcpy_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[d23be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_packet
<LI><a href="#[28671a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeHTTPHeader
<LI><a href="#[28a0b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_start_session
<LI><a href="#[28a0bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_send_mail
<LI><a href="#[2ad4760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_load_buff_cb
<LI><a href="#[2ad47f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_cmd
</UL>

<P><STRONG><a name="[2adc830]"></a>mn_strncpy_cb</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mnstring.o(.text), UNUSED)

<P><STRONG><a name="[2861c68]"></a>mn_strcat_cb</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, mnstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mn_strcat_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[28671a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeHTTPHeader
<LI><a href="#[28a0b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_start_session
<LI><a href="#[28a0bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_send_mail
<LI><a href="#[2ad4760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_load_buff_cb
</UL>

<P><STRONG><a name="[2adc7e8]"></a>mn_strlen_cb</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mnstring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad4760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_load_buff_cb
</UL>

<P><STRONG><a name="[28cff10]"></a>mn_memcpy_cb</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mnstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mn_memcpy_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[d24570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_get_send_size
<LI><a href="#[2867278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_func
</UL>

<P><STRONG><a name="[2861bd8]"></a>mn_stricmp_cb</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mnstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mn_stricmp_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[2adde20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[28671a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeHTTPHeader
<LI><a href="#[2acf058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vf_entry
</UL>

<P><STRONG><a name="[2861b90]"></a>mn_strnicmp_cb</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, mnstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mn_strnicmp_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[2adde20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[d23b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_recv_byte
</UL>

<P><STRONG><a name="[2adc7a0]"></a>mn_stricmp</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, mnstring.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mn_stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2adde20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_pf_get_entry
<LI><a href="#[2861cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_gf_get_entry
<LI><a href="#[2ac26a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_atoi
<LI><a href="#[2acd948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_gf_del_entry
<LI><a href="#[2acd990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_pf_del_entry
<LI><a href="#[2acda20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_del_entry
</UL>

<P><STRONG><a name="[2adc758]"></a>mn_strnicmp</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, mnstring.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2adde20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tolower
</UL>

<P><STRONG><a name="[28770f8]"></a>mn_send_byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, physical.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[286dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ether_start_packet
<LI><a href="#[286f340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendHWAddr
<LI><a href="#[2877020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_arp_packet
<LI><a href="#[2877458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_process_packet
<LI><a href="#[2878ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_send_request
<LI><a href="#[2a3f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_escaped_byte
</UL>

<P><STRONG><a name="[2a3f0b8]"></a>mn_send_escaped_byte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, physical.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28770f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[28556c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ping_reply
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[28cfda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_send
<LI><a href="#[2a3f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_send_header
<LI><a href="#[2b3e740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_header
</UL>

<P><STRONG><a name="[2ad6a10]"></a>mn_peek_recv</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, physical.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2877188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_byte
</UL>

<P><STRONG><a name="[2877188]"></a>mn_recv_byte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, physical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = mn_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2ad6a10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_peek_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[286dcc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ether_recv_header
<LI><a href="#[2877218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_get_pkt
<LI><a href="#[2877458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_process_packet
<LI><a href="#[2a3f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_escaped_byte
</UL>

<P><STRONG><a name="[2a3f100]"></a>mn_recv_escaped_byte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, physical.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = mn_recv_escaped_byte &rArr; mn_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2877188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2855758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_recv_header
<LI><a href="#[28557a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ping_pkt
<LI><a href="#[2a3f268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_recv
<LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
<LI><a href="#[2b3e620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_header
</UL>

<P><STRONG><a name="[2ad69c8]"></a>mn_recv_byte_present</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, physical.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
</UL>

<P><STRONG><a name="[2ad6980]"></a>mn_get_xmit_byte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, physical.o(.text), UNUSED)

<P><STRONG><a name="[2ad6938]"></a>mn_put_recv_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, physical.o(.text), UNUSED)

<P><STRONG><a name="[2ad3050]"></a>mn_smtp_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mn_smtp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1c530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c18d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_init
</UL>

<P><STRONG><a name="[28a0c00]"></a>mn_smtp_end_session</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1848 + Unknown Stack Size
<LI>Call Chain = mn_smtp_end_session &rArr; smtp_wait_reply &rArr; mn_do_multi_line &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[285ba88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[2ad2f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv
<LI><a href="#[2ad47f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_cmd
<LI><a href="#[2ad4838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_wait_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[28a0b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_start_session
<LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
</UL>

<P><STRONG><a name="[28a0b70]"></a>mn_smtp_start_session</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1896 + Unknown Stack Size
<LI>Call Chain = mn_smtp_start_session &rArr; mn_smtp_end_session &rArr; smtp_wait_reply &rArr; mn_do_multi_line &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[285ba88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close
<LI><a href="#[2861c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strcpy_cb
<LI><a href="#[2861c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strcat_cb
<LI><a href="#[28a0c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_end_session
<LI><a href="#[28cfec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open
<LI><a href="#[2ad2fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_getMyIPAddr_func
<LI><a href="#[2ad47f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_cmd
<LI><a href="#[2ad4838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_wait_reply
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
</UL>

<P><STRONG><a name="[28a0bb8]"></a>mn_smtp_send_mail</STRONG> (Thumb, 612 bytes, Stack size 32 bytes, smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = mn_smtp_send_mail &rArr; smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strcpy_cb
<LI><a href="#[2861c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strcat_cb
<LI><a href="#[2ad46d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_load_buff
<LI><a href="#[2ad4718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_body
<LI><a href="#[2ad4760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_load_buff_cb
<LI><a href="#[2ad47a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_empty_buff
<LI><a href="#[2ad47f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_cmd
<LI><a href="#[2ad4838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_wait_reply
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
</UL>

<P><STRONG><a name="[28c18d0]"></a>mn_init</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = mn_init &rArr; mn_ether_init &rArr; lpc2368_init &rArr; phy_init &rArr; mii_read &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[285bb18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_interface_init
<LI><a href="#[2861fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_init
<LI><a href="#[286dd08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ether_init
<LI><a href="#[2870ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_init
<LI><a href="#[2877410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_init
<LI><a href="#[2a3f388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_init
<LI><a href="#[2a4cf78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_init
<LI><a href="#[2ad3050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_init
<LI><a href="#[2b17d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_init
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
</UL>

<P><STRONG><a name="[2877338]"></a>mn_abort</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mn_abort &rArr; mn_http_close_file
</UL>
<BR>[Calls]<UL><LI><a href="#[2861f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_close_file
<LI><a href="#[2b17d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[28556c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ping_reply
<LI><a href="#[285ba88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close
<LI><a href="#[2861f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_http_parse
<LI><a href="#[28620a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_server_send
<LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
<LI><a href="#[2877380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_lookup
<LI><a href="#[2877458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_process_packet
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[28a0c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_end_session
<LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[28cfec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open
<LI><a href="#[2a4cea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_update_inactivity_timers
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
<LI><a href="#[2b3e620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_header
</UL>

<P><STRONG><a name="[d23cb8]"></a>mn_find_socket</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[28771d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open_socket
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[293dbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port2002_handler
<LI><a href="#[2a3f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_icmp_recv_reply
<LI><a href="#[2b32088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_udp_socket
<LI><a href="#[2b3e620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_header
<LI><a href="#[2b3e668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tcp_socket
</UL>

<P><STRONG><a name="[28771d0]"></a>mn_open_socket</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d23cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_find_socket
<LI><a href="#[2b17cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_init
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28557a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ping_pkt
<LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
<LI><a href="#[2877380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_lookup
<LI><a href="#[2877458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_process_packet
<LI><a href="#[28cfec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open
<LI><a href="#[2b3e620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_header
</UL>

<P><STRONG><a name="[28cfec8]"></a>mn_open</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1824 + Unknown Stack Size
<LI>Call Chain = mn_open &rArr; mn_tcp_open &rArr; tcp_recv_send &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28771d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open_socket
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[2b17c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_open
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[28a0b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_start_session
<LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[293dbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port2002_handler
</UL>

<P><STRONG><a name="[2870d38]"></a>mn_recv_wait</STRONG> (Thumb, 316 bytes, Stack size 32 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d242e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_recv_idle
<LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[2a3f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_icmp_recv_reply
<LI><a href="#[2a3f268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_recv
<LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[2a5dfe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send
<LI><a href="#[2ad2f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv
<LI><a href="#[2ad3008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_do_multi_line
</UL>

<P><STRONG><a name="[2a5dfe0]"></a>mn_send</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1880 + Unknown Stack Size
<LI>Call Chain = mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
<LI><a href="#[2870e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_renew
<LI><a href="#[28cfda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_send
<LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
</UL>
<BR>[Called By]<UL><LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
<LI><a href="#[2ad46d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_load_buff
<LI><a href="#[2ad4718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_body
<LI><a href="#[2ad4760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_load_buff_cb
<LI><a href="#[2ad47a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_empty_buff
</UL>

<P><STRONG><a name="[2ad2f30]"></a>mn_recv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760 + Unknown Stack Size
<LI>Call Chain = mn_recv &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[28a0c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_end_session
<LI><a href="#[2ad4718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_body
<LI><a href="#[2ad47f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_cmd
<LI><a href="#[2ad4838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_wait_reply
</UL>

<P><STRONG><a name="[285ba88]"></a>mn_close</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784 + Unknown Stack Size
<LI>Call Chain = mn_close &rArr; mn_tcp_shutdown &rArr; tcp_recv_send &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[2b17c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[28a0b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_start_session
<LI><a href="#[28a0c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_end_session
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[28c1960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_interface
</UL>

<P><STRONG><a name="[28772f0]"></a>mn_close_packet</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mn_close_packet &rArr; lpc2368_send &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a33d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_send
</UL>
<BR>[Called By]<UL><LI><a href="#[28556c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ping_reply
<LI><a href="#[2877458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_process_packet
<LI><a href="#[2878ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_send_request
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[28cfda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_send
<LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[2b3e548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_nodata_pkt
<LI><a href="#[2b3e6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
<LI><a href="#[2b3e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_syn_close
</UL>

<P><STRONG><a name="[2b17e20]"></a>mn_get_socket_type</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, socket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b3e620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_header
</UL>

<P><STRONG><a name="[2a4cea0]"></a>mn_update_inactivity_timers</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mn_update_inactivity_timers &rArr; mn_abort &rArr; mn_http_close_file
</UL>
<BR>[Calls]<UL><LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2a4cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[2b17dd8]"></a>mn_reset_inactivity_timer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, socket.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mn_reset_inactivity_timer
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
<LI><a href="#[2b3e620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_header
</UL>

<P><STRONG><a name="[2a3f070]"></a>mn_socket_recv_buff_space</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, socket.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3f1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_icmp_recv_reply
<LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
</UL>

<P><STRONG><a name="[2861b48]"></a>mn_ustoa</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1aff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28671a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeHTTPHeader
</UL>

<P><STRONG><a name="[2b14b50]"></a>mn_uctoa</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1aff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad2fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_getMyIPAddr_func
<LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>

<P><STRONG><a name="[2ad2fc0]"></a>mn_getMyIPAddr_func</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = mn_getMyIPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2b14b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_uctoa
</UL>
<BR>[Called By]<UL><LI><a href="#[28a0b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_start_session
</UL>

<P><STRONG><a name="[2861d88]"></a>mn_atous</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mn_atous
</UL>
<BR>[Called By]<UL><LI><a href="#[d23b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_recv_byte
<LI><a href="#[2ad2f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_get_reply_code
</UL>

<P><STRONG><a name="[2861d40]"></a>mn_atous_long</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mn_atous_long
</UL>
<BR>[Called By]<UL><LI><a href="#[d23b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_recv_byte
</UL>

<P><STRONG><a name="[2ad2f78]"></a>mn_get_reply_code</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mn_get_reply_code &rArr; mn_atous
</UL>
<BR>[Calls]<UL><LI><a href="#[2861d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_atous
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad3008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_do_multi_line
<LI><a href="#[2ad4838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_wait_reply
</UL>

<P><STRONG><a name="[2ad3008]"></a>mn_do_multi_line</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1808 + Unknown Stack Size
<LI>Call Chain = mn_do_multi_line &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
<LI><a href="#[2ad2f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_get_reply_code
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad4838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_wait_reply
</UL>

<P><STRONG><a name="[2b17cb8]"></a>mn_tcp_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = mn_tcp_init &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[28772a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_get_timer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[28771d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open_socket
</UL>

<P><STRONG><a name="[2b17d00]"></a>mn_tcp_abort</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
<LI><a href="#[2b17c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_shutdown
<LI><a href="#[2b17c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_open
</UL>

<P><STRONG><a name="[28cfdf0]"></a>mn_tcp_send</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = mn_tcp_send &rArr; tcp_send_syn_close &rArr; tcp_send_nodata_hdr &rArr; tcp_send_header &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d24570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_get_send_size
<LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[28772f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_packet
<LI><a href="#[2b17d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_abort
<LI><a href="#[2b3e548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_nodata_pkt
<LI><a href="#[2b3e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_syn_close
<LI><a href="#[2b3e740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_header
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[293dbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port2002_handler
<LI><a href="#[2a5dfe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send
<LI><a href="#[2ad47f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_cmd
<LI><a href="#[2b3e5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_send
</UL>

<P><STRONG><a name="[2adf908]"></a>mn_tcp_recv</STRONG> (Thumb, 1110 bytes, Stack size 64 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1728 + Unknown Stack Size
<LI>Call Chain = mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[d24498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_process_packet
<LI><a href="#[d244e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_recv_byte
<LI><a href="#[d24528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_init_recv
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[2877260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_discard_packet
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[2a30ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_tcp_start_checksum
<LI><a href="#[2a3f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_socket_recv_buff_space
<LI><a href="#[2a3f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_escaped_byte
<LI><a href="#[2a3f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_data_send_checksum
<LI><a href="#[2b17d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_abort
<LI><a href="#[2b3e4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
<LI><a href="#[2b3e500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_unacked_bytes
<LI><a href="#[2b3e548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_nodata_pkt
<LI><a href="#[2b3e620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_header
<LI><a href="#[2b3e6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
<LI><a href="#[2b3e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_syn_close
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[2b3e5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_send
</UL>

<P><STRONG><a name="[2b17c70]"></a>mn_tcp_open</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = mn_tcp_open &rArr; tcp_recv_send &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[2b17d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_abort
<LI><a href="#[2b3e5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_send
<LI><a href="#[2b3e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_syn_close
</UL>
<BR>[Called By]<UL><LI><a href="#[28cfec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open
</UL>

<P><STRONG><a name="[28cfe38]"></a>mn_tcp_close</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = mn_tcp_close &rArr; tcp_send_nodata_pkt &rArr; tcp_send_nodata_hdr &rArr; tcp_send_header &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[2b3e548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_nodata_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[28620a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_server_send
<LI><a href="#[293dbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port2002_handler
<LI><a href="#[2b17c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_shutdown
</UL>

<P><STRONG><a name="[2b17c28]"></a>mn_tcp_shutdown</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = mn_tcp_shutdown &rArr; tcp_recv_send &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[28cfe38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_close
<LI><a href="#[2b17d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_abort
<LI><a href="#[2b3e5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_send
</UL>
<BR>[Called By]<UL><LI><a href="#[285ba88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close
</UL>

<P><STRONG><a name="[2adf8c0]"></a>mn_udp_recv</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = mn_udp_recv &rArr; find_udp_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2877260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_discard_packet
<LI><a href="#[2a30ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_tcp_start_checksum
<LI><a href="#[2a3f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_tcp_end_checksum
<LI><a href="#[2a3f070]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_socket_recv_buff_space
<LI><a href="#[2a3f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_escaped_byte
<LI><a href="#[2a3f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_data_send_checksum
<LI><a href="#[2a3f220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_copy_recv_buff
<LI><a href="#[2b17dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_inactivity_timer
<LI><a href="#[2b32088]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_udp_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[2b3e5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_send
</UL>

<P><STRONG><a name="[28cfda8]"></a>mn_udp_send</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = mn_udp_send &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28772f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_packet
<LI><a href="#[2a3f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_escaped_byte
<LI><a href="#[2a3f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_send_header
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
<LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
<LI><a href="#[2a5dfe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send
</UL>

<P><STRONG><a name="[2861b00]"></a>mn_vf_get_entry</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, vfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mn_vf_get_entry &rArr; mn_stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2adc7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_stricmp
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d23be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_packet
<LI><a href="#[2899520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout_func
<LI><a href="#[28997a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_updatedevparam
<LI><a href="#[28997f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_system_admin
<LI><a href="#[2899880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_smtpsnmp
<LI><a href="#[28998c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_setdeviceparam
<LI><a href="#[2899910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_serial
<LI><a href="#[2899958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security_admin
<LI><a href="#[28999a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[2899a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_reboot
<LI><a href="#[2899a78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_read_dev
<LI><a href="#[2899ac0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rdef
<LI><a href="#[2899b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_packing
<LI><a href="#[2899b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_network
<LI><a href="#[2899b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_multihost
<LI><a href="#[2899be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_load
<LI><a href="#[2899c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_gpio
<LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command
<LI><a href="#[2899cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_chk_login_passwd
<LI><a href="#[2899d00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_check
<LI><a href="#[2899d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_serial
<LI><a href="#[2899d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_login
<LI><a href="#[2899dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_admin
<LI><a href="#[2899e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_bridge
<LI><a href="#[2899e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm5
<LI><a href="#[2899eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm4
<LI><a href="#[2899ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm3
<LI><a href="#[2899f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm2
<LI><a href="#[2899f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm1
<LI><a href="#[2899fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_admin
<LI><a href="#[289a1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_func
<LI><a href="#[289a3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[2bafe20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upgrade_func
</UL>

<P><STRONG><a name="[289a2e8]"></a>mn_vf_set_entry</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, vfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mn_vf_set_entry &rArr; set_vf_entry &rArr; mn_stricmp_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[2acf058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vf_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webpages_init
</UL>

<P><STRONG><a name="[2acda68]"></a>mn_vf_set_ram_entry</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, vfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2acf058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vf_entry
</UL>

<P><STRONG><a name="[2acda20]"></a>mn_vf_del_entry</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, vfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2adc7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_stricmp
</UL>

<P><STRONG><a name="[2861ab8]"></a>mn_vf_open_file</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, vfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
</UL>

<P><STRONG><a name="[2acd9d8]"></a>mn_vf_close_file</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vfile.o(.text), UNUSED)

<P><STRONG><a name="[28cfc40]"></a>page_send_close</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, vfile.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d24450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_send_complete
<LI><a href="#[2861f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_close_file
<LI><a href="#[28620a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_server_send
</UL>

<P><STRONG><a name="[2861cb0]"></a>mn_pf_get_entry</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mn_pf_get_entry &rArr; mn_stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2adc7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d23be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_packet
</UL>

<P><STRONG><a name="[289a330]"></a>mn_pf_set_entry</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, vfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mn_pf_set_entry &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webpages_init
</UL>

<P><STRONG><a name="[2acd990]"></a>mn_pf_del_entry</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2adc7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_stricmp
</UL>

<P><STRONG><a name="[2861cf8]"></a>mn_gf_get_entry</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mn_gf_get_entry &rArr; mn_stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2adc7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_stricmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2867278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_func
</UL>

<P><STRONG><a name="[289a378]"></a>mn_gf_set_entry</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mn_gf_set_entry &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;webpages_init
</UL>

<P><STRONG><a name="[2acd948]"></a>mn_gf_del_entry</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vfile.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2adc7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_stricmp
</UL>

<P><STRONG><a name="[2922190]"></a>atoint</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, post_index.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = atoint
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
</UL>

<P><STRONG><a name="[2ac26a8]"></a>np_atoi</STRONG> (Thumb, 68 bytes, Stack size 760 bytes, post_index.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = np_atoi &rArr; mn_stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2adc7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_stricmp
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2899be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_load
</UL>

<P><STRONG><a name="[293daa0]"></a>check_password</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, post_index.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[293dce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_spassword_func
<LI><a href="#[2ac2660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_password_func
</UL>

<P><STRONG><a name="[2ac2660]"></a>check_password_func</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, post_index.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[293daa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_password
</UL>

<P><STRONG><a name="[289a3c0]"></a>main_func</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, post_index.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = main_func &rArr; mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899be0]"></a>post_load</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, post_index.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = post_load &rArr; np_atoi &rArr; mn_stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[2ac26a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_atoi
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2b57680]"></a>remove_space</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, post_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_space &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2897438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_serial
<LI><a href="#[2897900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_login
<LI><a href="#[2898488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_admin
<LI><a href="#[2b57638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spswd_func
</UL>

<P><STRONG><a name="[2899b50]"></a>post_network</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, post_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = post_network &rArr; mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[293da58]"></a>hname_supplement</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, post_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = hname_supplement
</UL>
<BR>[Called By]<UL><LI><a href="#[289a1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_func
<LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
</UL>

<P><STRONG><a name="[289a1c8]"></a>network_func</STRONG> (Thumb, 420 bytes, Stack size 24 bytes, post_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = network_func &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d24648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_ip_process
<LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[293da58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hname_supplement
<LI><a href="#[2e1b840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp (via Veneer)
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2b57638]"></a>spswd_func</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, post_network.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b57680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_space
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[2899910]"></a>post_serial</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, post_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = post_serial &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[28d5d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init_uart
<LI><a href="#[28d5d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_gpio_ttl_init_uart
<LI><a href="#[28d5de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_full_init_uart
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899e20]"></a>post_bridge</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, post_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = post_bridge &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d24648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_ip_process
<LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899b08]"></a>post_packing</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, post_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = post_packing &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e1d370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899b98]"></a>post_multihost</STRONG> (Thumb, 1298 bytes, Stack size 24 bytes, post_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = post_multihost &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d24648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_ip_process
<LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e1c530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899880]"></a>post_smtpsnmp</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, post_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = post_smtpsnmp &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d24648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_ip_process
<LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2b61418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_setFlashVariable
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2b76160]"></a>add_space</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, post_security.o(.text), UNUSED)

<P><STRONG><a name="[28999a0]"></a>post_security</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, post_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = post_security &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d24648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_ip_process
<LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899d90]"></a>post_change_login</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, post_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + Unknown Stack Size
<LI>Call Chain = post_change_login &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899dd8]"></a>post_change_admin</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, post_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + Unknown Stack Size
<LI>Call Chain = post_change_admin &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899d48]"></a>post_change_serial</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, post_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + Unknown Stack Size
<LI>Call Chain = post_change_serial &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28997a8]"></a>post_updatedevparam</STRONG> (Thumb, 194 bytes, Stack size 56 bytes, post_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = post_updatedevparam &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28998c8]"></a>post_setdeviceparam</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, post_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = post_setdeviceparam &rArr; mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899a78]"></a>post_read_dev</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, post_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = post_read_dev &rArr; mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899d00]"></a>post_check</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, post_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = post_check &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899ac0]"></a>post_rdef</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, post_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = post_rdef &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28c1ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899a30]"></a>post_reboot</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, post_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = post_reboot &rArr; mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2bafe20]"></a>upgrade_func</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, post_system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
</UL>

<P><STRONG><a name="[28c19f0]"></a>io_dir</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, post_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2899c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_gpio
<LI><a href="#[28c1d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_model
<LI><a href="#[2a4cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[2a4cf30]"></a>io_set</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, post_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2899c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_gpio
<LI><a href="#[2a4cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[28c16d8]"></a>test_bit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, post_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[2897cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_image_source
<LI><a href="#[28abba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_pin_condition
<LI><a href="#[28c1d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;detect_model
<LI><a href="#[2a4cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[2899c28]"></a>post_gpio</STRONG> (Thumb, 1240 bytes, Stack size 24 bytes, post_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = post_gpio &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28c19f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_dir
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2a4cf30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899c70]"></a>post_command</STRONG> (Thumb, 1802 bytes, Stack size 120 bytes, post_device_query.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = post_command &rArr; mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[d23fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delayMs
<LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28d62f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_xmit
<LI><a href="#[2bb9ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer
<LI><a href="#[2bb9af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_timer
<LI><a href="#[2bb9b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer
<LI><a href="#[2e1b358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899520]"></a>set_timeout_func</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, post_read_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = set_timeout_func &rArr; mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[2e1c928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28999e8]"></a>post_rst_cnt</STRONG> (Thumb, 472 bytes, Stack size 64 bytes, post_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = post_rst_cnt &rArr; mn_open &rArr; mn_tcp_open &rArr; tcp_recv_send &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d24648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s_ip_process
<LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
<LI><a href="#[28772f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_packet
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[28c17f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_wait_ticks
<LI><a href="#[28cfec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open
<LI><a href="#[2a3f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_tcp_end_checksum
<LI><a href="#[2a3f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_escaped_byte
<LI><a href="#[2a3f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_data_send_checksum
<LI><a href="#[2a3f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_send_header
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899f88]"></a>post_alarm1</STRONG> (Thumb, 506 bytes, Stack size 24 bytes, post_alarm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = post_alarm1 &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e1d370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899f40]"></a>post_alarm2</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, post_alarm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = post_alarm2 &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e1d370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899ef8]"></a>post_alarm3</STRONG> (Thumb, 508 bytes, Stack size 24 bytes, post_alarm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = post_alarm3 &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e1d370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899eb0]"></a>post_alarm4</STRONG> (Thumb, 504 bytes, Stack size 24 bytes, post_alarm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = post_alarm4 &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e1d370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899e68]"></a>post_alarm5</STRONG> (Thumb, 508 bytes, Stack size 24 bytes, post_alarm5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = post_alarm5 &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e1d370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899fd0]"></a>post_admin</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, post_admin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = post_admin &rArr; mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899958]"></a>post_security_admin</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, post_security_admin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = post_security_admin &rArr; mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28997f0]"></a>post_system_admin</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, post_system_admin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = post_system_admin &rArr; mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899cb8]"></a>post_chk_login_passwd</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, post_login.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = post_chk_login_passwd &rArr; mn_http_set_file &rArr; MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
<LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2922220]"></a>_fl_read</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c1768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
</UL>

<P><STRONG><a name="[2c44a98]"></a>__fl_ProgramLastSector</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __fl_ProgramLastSector
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2e19c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[29221d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fl_write
</UL>

<P><STRONG><a name="[2c44a50]"></a>__fl_EraseLastSector</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __fl_EraseLastSector
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2e19c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[29221d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fl_write
</UL>

<P><STRONG><a name="[29221d8]"></a>_fl_write</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _fl_write &rArr; __fl_EraseLastSector
</UL>
<BR>[Calls]<UL><LI><a href="#[2c44a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fl_EraseLastSector
<LI><a href="#[2c44a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fl_ProgramLastSector
</UL>
<BR>[Called By]<UL><LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
</UL>

<P><STRONG><a name="[d32720]"></a>WDTInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wdt.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[d32ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmx_abort
<LI><a href="#[28cfe80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_port2002_process_packet
<LI><a href="#[28d60b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[28d61d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_settings_mode
</UL>

<P><STRONG><a name="[2c44158]"></a>WDTFeed</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, wdt.o(.text), UNUSED)

<P><STRONG><a name="[2bb9af8]"></a>enable_timer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command
</UL>

<P><STRONG><a name="[2bb9b40]"></a>disable_timer</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command
</UL>

<P><STRONG><a name="[2bb9ab0]"></a>reset_timer</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command
</UL>

<P><STRONG><a name="[d23fd0]"></a>delayMs</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command
<LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[28cfd60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_recv
</UL>

<P><STRONG><a name="[2c43180]"></a>init_timer</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[2c43210]"></a>Timer3Handler</STRONG> (ARM, 64 bytes, Stack size 12 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Timer3Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[2c431c8]"></a>Timer2Handler</STRONG> (ARM, 52 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer2Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text)
</UL>
<P><STRONG><a name="[295f2f0]"></a>sendchar</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a02e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[28a03b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[295f338]"></a>getkey</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a0370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[2c8c7e8]"></a>num_ascii</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ssi_overview.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c8c7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_ascii
</UL>

<P><STRONG><a name="[2c8c7a0]"></a>byte_ascii</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssi_overview.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c8c7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;num_ascii
</UL>

<P><STRONG><a name="[2897708]"></a>ssi_pswd_msg</STRONG> (Thumb, 58 bytes, Stack size 72 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ssi_pswd_msg &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a258]"></a>model_func</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = model_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2896e08]"></a>version_func</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = version_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2c8c758]"></a>getMac_func</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getMac_func
</UL>
<BR>[Called By]<UL><LI><a href="#[289a408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_func
</UL>

<P><STRONG><a name="[289a408]"></a>mac_func</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mac_func &rArr; getMac_func
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMac_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a018]"></a>port_func</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = port_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289aa38]"></a>dhcp_func</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dhcp_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28992e0]"></a>snmp_func</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = snmp_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a2a0]"></a>modbus_func</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = modbus_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2c8c710]"></a>get_IPAddr_func</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2b14b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_uctoa
</UL>
<BR>[Called By]<UL><LI><a href="#[2896f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;submask_func
<LI><a href="#[2897120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_trap_ip
<LI><a href="#[2897360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_smtpip
<LI><a href="#[2897870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_mipaddr
<LI><a href="#[2897ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ip8
<LI><a href="#[2897af8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ip7
<LI><a href="#[2897b40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ip6
<LI><a href="#[2897b88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ip5
<LI><a href="#[2897bd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ip4
<LI><a href="#[2897c18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ip3
<LI><a href="#[2897c60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ip2
<LI><a href="#[2897ca8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ip1
<LI><a href="#[2898008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_dns
<LI><a href="#[289a570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_func
<LI><a href="#[289a768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gw_ip_func
</UL>

<P><STRONG><a name="[289a570]"></a>ip_func</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ip_func &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2896f70]"></a>submask_func</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = submask_func &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898008]"></a>ssi_dns</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ssi_dns &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a768]"></a>gw_ip_func</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = gw_ip_func &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a6d8]"></a>hname_func</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hname_func &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28995b0]"></a>serial_func</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, ssi_overview.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = serial_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a9f0]"></a>dhcpflag_func</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssi_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dhcpflag_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897750]"></a>ssi_protocol</STRONG> (Thumb, 182 bytes, Stack size 856 bytes, ssi_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = ssi_protocol &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289ade0]"></a>autonegotiate_func</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssi_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = autonegotiate_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899688]"></a>s10_func</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssi_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = s10_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28996d0]"></a>s100_func</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssi_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = s100_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a8d0]"></a>fduplex_func</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssi_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fduplex_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a720]"></a>hduplex_func</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssi_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = hduplex_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289afd8]"></a>WebPort_func</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssi_network.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WebPort_func &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289ad98]"></a>baud_func</STRONG> (Thumb, 266 bytes, Stack size 1688 bytes, ssi_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1720<LI>Call Chain = baud_func &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289abe8]"></a>databits_func</STRONG> (Thumb, 202 bytes, Stack size 1048 bytes, ssi_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = databits_func &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a060]"></a>parity_func</STRONG> (Thumb, 180 bytes, Stack size 856 bytes, ssi_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = parity_func &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2896fb8]"></a>stopbit_func</STRONG> (Thumb, 168 bytes, Stack size 656 bytes, ssi_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = stopbit_func &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a888]"></a>flowcontrol_func</STRONG> (Thumb, 504 bytes, Stack size 856 bytes, ssi_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = flowcontrol_func &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897558]"></a>ssi_rs485type</STRONG> (Thumb, 198 bytes, Stack size 760 bytes, ssi_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ssi_rs485type &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28975e8]"></a>ssi_rs485timer</STRONG> (Thumb, 68 bytes, Stack size 208 bytes, ssi_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ssi_rs485timer &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28975a0]"></a>ssi_rs485txrx</STRONG> (Thumb, 194 bytes, Stack size 656 bytes, ssi_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = ssi_rs485txrx &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898248]"></a>ssi_connect_on</STRONG> (Thumb, 196 bytes, Stack size 1456 bytes, ssi_serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1488<LI>Call Chain = ssi_connect_on &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897318]"></a>ssi_snmp_en</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssi_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_snmp_en &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28981b8]"></a>ssi_contact</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ssi_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ssi_contact &rArr; mn_getFlashVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[2cab608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_getFlashVariable
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897948]"></a>ssi_location</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ssi_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ssi_location &rArr; mn_getFlashVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[2cab608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_getFlashVariable
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897168]"></a>ssi_trap_en</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssi_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_trap_en &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28973a8]"></a>ssi_smtp</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssi_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_smtp &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897120]"></a>ssi_trap_ip</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssi_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ssi_trap_ip &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897360]"></a>ssi_smtpip</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ssi_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ssi_smtpip &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898290]"></a>ssi_community</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssi_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssi_community &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897ee8]"></a>ssi_from</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssi_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssi_from &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897288]"></a>ssi_sub</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ssi_management.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssi_sub &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28972d0]"></a>ssi_spca</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_spca &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897000]"></a>ssi_wsa</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_wsa &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897dc8]"></a>ssi_ica</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_ica &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897a68]"></a>ssi_ipx</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_ipx &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897900]"></a>ssi_login</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ssi_login &rArr; remove_space &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2b57680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_space
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28978b8]"></a>ssi_login_msg</STRONG> (Thumb, 66 bytes, Stack size 216 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ssi_login_msg &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898488]"></a>ssi_admin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ssi_admin &rArr; remove_space &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2b57680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_space
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898440]"></a>ssi_admin_msg</STRONG> (Thumb, 60 bytes, Stack size 216 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ssi_admin_msg &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897438]"></a>ssi_serial</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ssi_serial &rArr; remove_space &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2b57680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_space
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28973f0]"></a>ssi_serial_msg</STRONG> (Thumb, 60 bytes, Stack size 216 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = ssi_serial_msg &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897ca8]"></a>ssi_ip1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ssi_ip1 &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897c60]"></a>ssi_ip2</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ssi_ip2 &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897c18]"></a>ssi_ip3</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ssi_ip3 &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897bd0]"></a>ssi_ip4</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ssi_ip4 &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897b88]"></a>ssi_ip5</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ssi_ip5 &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897b40]"></a>ssi_ip6</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ssi_ip6 &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897af8]"></a>ssi_ip7</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ssi_ip7 &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897ab0]"></a>ssi_ip8</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssi_security.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ssi_ip8 &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28993b8]"></a>show_unit_num_func</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = show_unit_num_func &rArr; mn_http_find_value &rArr; mn_http_decodeString
</UL>
<BR>[Calls]<UL><LI><a href="#[2861e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_find_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899490]"></a>show_cmd_func</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = show_cmd_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899400]"></a>show_name_func</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = show_name_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899370]"></a>show_units_func</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = show_units_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899448]"></a>show_idnum_func</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = show_idnum_func &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2cb53c0]"></a>dev_units_func</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dev_units_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb5258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_call_func
</UL>

<P><STRONG><a name="[2cb5378]"></a>dev_cmd_func</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dev_cmd_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb5258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_call_func
</UL>

<P><STRONG><a name="[2cb5330]"></a>dev_name_func</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dev_name_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb5258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_call_func
</UL>

<P><STRONG><a name="[2cb52e8]"></a>dev_chk_func</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = dev_chk_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb5258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_call_func
</UL>

<P><STRONG><a name="[2cb52a0]"></a>show_item_func</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = show_item_func
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb5258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_call_func
</UL>

<P><STRONG><a name="[2cb5258]"></a>dev_call_func</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = dev_call_func &rArr; dev_chk_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb52a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_item_func
<LI><a href="#[2cb52e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_chk_func
<LI><a href="#[2cb5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_name_func
<LI><a href="#[2cb5378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_cmd_func
<LI><a href="#[2cb53c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_units_func
<LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[289ab58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_all_func
</UL>

<P><STRONG><a name="[289ab58]"></a>dev_all_func</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, ssi_device_setup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dev_all_func &rArr; dev_call_func &rArr; dev_chk_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb5258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_call_func
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2cda098]"></a>get_no_of_io</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_no_of_io
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28977e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_o_chk
<LI><a href="#[2897a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_l_chk
<LI><a href="#[2897cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_image_source
<LI><a href="#[2897e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_i_chk
<LI><a href="#[2897e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_h_chk
<LI><a href="#[2898128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ct_o_chk
<LI><a href="#[2898170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ct_i_chk
<LI><a href="#[2898320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_cio
<LI><a href="#[2898368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ci_o_chk
<LI><a href="#[28983b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ci_i_chk
</UL>

<P><STRONG><a name="[2898320]"></a>ssi_cio</STRONG> (Thumb, 70 bytes, Stack size 208 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = ssi_cio &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2cda098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_of_io
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897480]"></a>ssi_s_no</STRONG> (Thumb, 74 bytes, Stack size 208 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ssi_s_no &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28982d8]"></a>ssi_cio_status</STRONG> (Thumb, 114 bytes, Stack size 208 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ssi_cio_status &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897f30]"></a>ssi_fio_status</STRONG> (Thumb, 114 bytes, Stack size 208 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = ssi_fio_status &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897e10]"></a>ssi_i_chk</STRONG> (Thumb, 84 bytes, Stack size 224 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ssi_i_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cda098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_of_io
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28977e0]"></a>ssi_o_chk</STRONG> (Thumb, 78 bytes, Stack size 224 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ssi_o_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cda098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_of_io
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897e58]"></a>ssi_h_chk</STRONG> (Thumb, 80 bytes, Stack size 224 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ssi_h_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cda098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_of_io
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897a20]"></a>ssi_l_chk</STRONG> (Thumb, 84 bytes, Stack size 224 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ssi_l_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cda098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_of_io
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897cf0]"></a>ssi_image_source</STRONG> (Thumb, 108 bytes, Stack size 232 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ssi_image_source &rArr; test_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[28c16d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_bit
<LI><a href="#[2cda098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_of_io
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28983b0]"></a>ssi_ci_i_chk</STRONG> (Thumb, 84 bytes, Stack size 224 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ssi_ci_i_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cda098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_of_io
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898368]"></a>ssi_ci_o_chk</STRONG> (Thumb, 362 bytes, Stack size 224 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ssi_ci_o_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cda098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_of_io
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898170]"></a>ssi_ct_i_chk</STRONG> (Thumb, 86 bytes, Stack size 224 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ssi_ct_i_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cda098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_of_io
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898128]"></a>ssi_ct_o_chk</STRONG> (Thumb, 84 bytes, Stack size 224 bytes, ssi_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ssi_ct_o_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2cda098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_of_io
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28976c0]"></a>ssi_response</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ssi_device_query.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_response &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2ce3e28]"></a>read_unit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ssi_read_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_unit
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce3d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_column
</UL>

<P><STRONG><a name="[2ce3de0]"></a>get_reading</STRONG> (Thumb, 600 bytes, Stack size 64 bytes, ssi_read_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = get_reading &rArr; start_xmit &rArr; EthernetToSerial
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[28d62f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_xmit
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr (via Veneer)
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce3d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_column
</UL>

<P><STRONG><a name="[2ce3d98]"></a>read_dev_name</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ssi_read_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_dev_name
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce3d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_column
</UL>

<P><STRONG><a name="[2ce3d50]"></a>read_sno</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, ssi_read_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_sno
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce3d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_column
</UL>

<P><STRONG><a name="[2ce3d08]"></a>read_column</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ssi_read_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = read_column &rArr; get_reading &rArr; start_xmit &rArr; EthernetToSerial
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce3d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sno
<LI><a href="#[2ce3d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dev_name
<LI><a href="#[2ce3de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reading
<LI><a href="#[2ce3e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_unit
</UL>
<BR>[Called By]<UL><LI><a href="#[289ab10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_read_func
</UL>

<P><STRONG><a name="[289ab10]"></a>dev_read_func</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, ssi_read_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = dev_read_func &rArr; read_column &rArr; get_reading &rArr; start_xmit &rArr; EthernetToSerial
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce3d08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_column
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28983f8]"></a>ssi_chkd_devs</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ssi_read_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_chkd_devs &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28971b0]"></a>ssi_timeout_select</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ssi_read_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = ssi_timeout_select &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897990]"></a>ssi_load_timeout</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ssi_read_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ssi_load_timeout &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28979d8]"></a>ssi_load_on</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ssi_read_device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = ssi_load_on &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset (via Veneer)
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897ea0]"></a>ssi_fullserial</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_fullserial &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28980e0]"></a>ssi_cts</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_cts &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897510]"></a>ssi_rts</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_rts &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897fc0]"></a>ssi_dsr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_dsr &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898098]"></a>ssi_dcd</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_dcd &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897f78]"></a>ssi_dtr</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ssi_dtr &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28974c8]"></a>ssi_rx_bytes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_rx_bytes &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28970d8]"></a>ssi_tx_bytes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_tx_bytes &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897240]"></a>ssi_tcp_rx_bytes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_tcp_rx_bytes &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28971f8]"></a>ssi_tcp_tx_bytes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_tcp_tx_bytes &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897090]"></a>ssi_udp_rx_bytes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_udp_rx_bytes &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897048]"></a>ssi_udp_tx_bytes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_udp_tx_bytes &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897d80]"></a>ssi_icmp_rx_bytes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_icmp_rx_bytes &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897d38]"></a>ssi_icmp_tx_bytes</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_diagnostics.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_icmp_tx_bytes &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899208]"></a>ssi_a1_e_chk</STRONG> (Thumb, 120 bytes, Stack size 432 bytes, ssi_alarm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ssi_a1_e_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899058]"></a>ssi_a1_t_chk</STRONG> (Thumb, 114 bytes, Stack size 432 bytes, ssi_alarm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ssi_a1_t_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28991c0]"></a>ssi_a1_ic_evt</STRONG> (Thumb, 548 bytes, Stack size 1976 bytes, ssi_alarm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = ssi_a1_ic_evt &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28990e8]"></a>ssi_a1_sic_evt</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, ssi_alarm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ssi_a1_sic_evt &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899298]"></a>ssi_a1_c1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ssi_alarm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a1_c1 &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28990a0]"></a>ssi_a1_sspd</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ssi_alarm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssi_a1_sspd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899250]"></a>ssi_a1_c2</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ssi_alarm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a1_c2 &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899130]"></a>ssi_a1_ri</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ssi_alarm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a1_ri &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899010]"></a>ssi_a1_to</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, ssi_alarm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ssi_a1_to &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2899178]"></a>ssi_a1_msg</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, ssi_alarm1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ssi_a1_msg &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898f38]"></a>ssi_a2_e_chk</STRONG> (Thumb, 120 bytes, Stack size 432 bytes, ssi_alarm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ssi_a2_e_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898d88]"></a>ssi_a2_t_chk</STRONG> (Thumb, 116 bytes, Stack size 432 bytes, ssi_alarm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ssi_a2_t_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898ef0]"></a>ssi_a2_ic_evt</STRONG> (Thumb, 548 bytes, Stack size 1976 bytes, ssi_alarm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = ssi_a2_ic_evt &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898e18]"></a>ssi_a2_sic_evt</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, ssi_alarm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ssi_a2_sic_evt &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898fc8]"></a>ssi_a2_c1</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ssi_alarm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a2_c1 &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898dd0]"></a>ssi_a2_sspd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssi_alarm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssi_a2_sspd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898f80]"></a>ssi_a2_c2</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ssi_alarm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a2_c2 &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898e60]"></a>ssi_a2_ri</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ssi_alarm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a2_ri &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898d40]"></a>ssi_a2_to</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, ssi_alarm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ssi_a2_to &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898ea8]"></a>ssi_a2_msg</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, ssi_alarm2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ssi_a2_msg &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898c68]"></a>ssi_a3_e_chk</STRONG> (Thumb, 120 bytes, Stack size 432 bytes, ssi_alarm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ssi_a3_e_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898ab8]"></a>ssi_a3_t_chk</STRONG> (Thumb, 114 bytes, Stack size 432 bytes, ssi_alarm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ssi_a3_t_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898c20]"></a>ssi_a3_ic_evt</STRONG> (Thumb, 548 bytes, Stack size 1976 bytes, ssi_alarm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = ssi_a3_ic_evt &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898b48]"></a>ssi_a3_sic_evt</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, ssi_alarm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ssi_a3_sic_evt &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898cf8]"></a>ssi_a3_c1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ssi_alarm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a3_c1 &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898b00]"></a>ssi_a3_sspd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssi_alarm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssi_a3_sspd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898cb0]"></a>ssi_a3_c2</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ssi_alarm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a3_c2 &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898b90]"></a>ssi_a3_ri</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ssi_alarm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a3_ri &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898a70]"></a>ssi_a3_to</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, ssi_alarm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ssi_a3_to &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898bd8]"></a>ssi_a3_msg</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, ssi_alarm3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ssi_a3_msg &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898998]"></a>ssi_a4_e_chk</STRONG> (Thumb, 120 bytes, Stack size 432 bytes, ssi_alarm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ssi_a4_e_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28987e8]"></a>ssi_a4_t_chk</STRONG> (Thumb, 116 bytes, Stack size 432 bytes, ssi_alarm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ssi_a4_t_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898950]"></a>ssi_a4_ic_evt</STRONG> (Thumb, 548 bytes, Stack size 1976 bytes, ssi_alarm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = ssi_a4_ic_evt &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898878]"></a>ssi_a4_sic_evt</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, ssi_alarm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ssi_a4_sic_evt &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898a28]"></a>ssi_a4_c1</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, ssi_alarm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a4_c1 &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898830]"></a>ssi_a4_sspd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssi_alarm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssi_a4_sspd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28989e0]"></a>ssi_a4_c2</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ssi_alarm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a4_c2 &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28988c0]"></a>ssi_a4_ri</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ssi_alarm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a4_ri &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28987a0]"></a>ssi_a4_to</STRONG> (Thumb, 354 bytes, Stack size 64 bytes, ssi_alarm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ssi_a4_to &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898908]"></a>ssi_a4_msg</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, ssi_alarm4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ssi_a4_msg &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28986c8]"></a>ssi_a5_e_chk</STRONG> (Thumb, 120 bytes, Stack size 432 bytes, ssi_alarm5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ssi_a5_e_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898518]"></a>ssi_a5_t_chk</STRONG> (Thumb, 114 bytes, Stack size 432 bytes, ssi_alarm5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ssi_a5_t_chk &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898680]"></a>ssi_a5_ic_evt</STRONG> (Thumb, 548 bytes, Stack size 1976 bytes, ssi_alarm5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2008<LI>Call Chain = ssi_a5_ic_evt &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28985a8]"></a>ssi_a5_sic_evt</STRONG> (Thumb, 50 bytes, Stack size 112 bytes, ssi_alarm5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ssi_a5_sic_evt &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898758]"></a>ssi_a5_c1</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ssi_alarm5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a5_c1 &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898560]"></a>ssi_a5_sspd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ssi_alarm5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ssi_a5_sspd &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898710]"></a>ssi_a5_c2</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ssi_alarm5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a5_c2 &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28985f0]"></a>ssi_a5_ri</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ssi_alarm5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ssi_a5_ri &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[28984d0]"></a>ssi_a5_to</STRONG> (Thumb, 352 bytes, Stack size 64 bytes, ssi_alarm5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = ssi_a5_to &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898638]"></a>ssi_a5_msg</STRONG> (Thumb, 30 bytes, Stack size 40 bytes, ssi_alarm5.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ssi_a5_msg &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a138]"></a>no_of_conns_func</STRONG> (Thumb, 216 bytes, Stack size 1440 bytes, ssi_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472<LI>Call Chain = no_of_conns_func &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a450]"></a>lp_func</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssi_bridge.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lp_func &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898200]"></a>ssi_connection_type</STRONG> (Thumb, 182 bytes, Stack size 864 bytes, ssi_multihost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = ssi_connection_type &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897678]"></a>ssi_retry_counter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssi_multihost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_retry_counter &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897630]"></a>ssi_retry_timeout</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_multihost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_retry_timeout &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897870]"></a>ssi_mipaddr</STRONG> (Thumb, 92 bytes, Stack size 320 bytes, ssi_multihost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = ssi_mipaddr &rArr; get_IPAddr_func &rArr; mn_uctoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8c710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_IPAddr_func
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897828]"></a>ssi_multi_port</STRONG> (Thumb, 102 bytes, Stack size 336 bytes, ssi_multihost.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ssi_multi_port &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a918]"></a>end_char_func</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ssi_packing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = end_char_func &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a840]"></a>fwd_endchar_func</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, ssi_packing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fwd_endchar_func &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289ad08]"></a>buff_time_func</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_packing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = buff_time_func &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2897798]"></a>ssi_pkt_len</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_packing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ssi_pkt_len &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[289a4e0]"></a>itimeout_func</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ssi_packing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = itimeout_func &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2898050]"></a>ssi_disconnect_by</STRONG> (Thumb, 234 bytes, Stack size 1080 bytes, ssi_packing.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112<LI>Call Chain = ssi_disconnect_by &rArr; __1sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
<LI><a href="#[2e1d530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> webpages.o(.text)
</UL>
<P><STRONG><a name="[2d85448]"></a>printVBTable</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hardwaredependent.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1d810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__1printf
</UL>

<P><STRONG><a name="[2922148]"></a>getVBTableFromFlash</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hardwaredependent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getVBTableFromFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
</UL>

<P><STRONG><a name="[2922100]"></a>setVBTableToFlash</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hardwaredependent.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setVBTableToFlash
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
</UL>

<P><STRONG><a name="[2d85400]"></a>mn_flashRead</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwaredependent.o(.text), UNUSED)

<P><STRONG><a name="[2d853b8]"></a>getVBTableByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hardwaredependent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
<LI><a href="#[2c53728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucFindOID
<LI><a href="#[2c551d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthVBTable
<LI><a href="#[2c567c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEnterprise
<LI><a href="#[2c5b2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMoveOidVariableToOutput
<LI><a href="#[2c5b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucCheckSetVariables
<LI><a href="#[2c5b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariables
<LI><a href="#[2cab608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_getFlashVariable
</UL>

<P><STRONG><a name="[2d85370]"></a>mn_flashWrite</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwaredependent.o(.text), UNUSED)

<P><STRONG><a name="[2d85328]"></a>setVBTableByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hardwaredependent.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b61418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_setFlashVariable
<LI><a href="#[2c5b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariables
</UL>

<P><STRONG><a name="[2b17d48]"></a>mn_snmp_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, snmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c18d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_init
</UL>

<P><STRONG><a name="[2adf950]"></a>mn_SNMP</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, snmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mn_SNMP &rArr; ucGetResponse &rArr; ucMoveOidVariableToOutput &rArr; ucFindOID &rArr; getLengthVBTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5e540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucGetResponse
<LI><a href="#[2c5e588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setOutSeqLen
<LI><a href="#[2c5e5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthSnmpIn
<LI><a href="#[2c5fe48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucCheckVersion
<LI><a href="#[2c5fe90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucCheckCommunity
</UL>
<BR>[Called By]<UL><LI><a href="#[28c1840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_server
</UL>

<P><STRONG><a name="[2c5e540]"></a>ucGetResponse</STRONG> (Thumb, 308 bytes, Stack size 32 bytes, snmpresponse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ucGetResponse &rArr; ucMoveOidVariableToOutput &rArr; ucFindOID &rArr; getLengthVBTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5b2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMoveOidVariableToOutput
<LI><a href="#[2c5b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucCheckSetVariables
<LI><a href="#[2c5b348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incOut
<LI><a href="#[2c5b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariables
<LI><a href="#[2c5b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveOidToTemp
<LI><a href="#[2c5b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataInputToOutput
<LI><a href="#[2c5ca58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getErrorV1
<LI><a href="#[2c5e588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setOutSeqLen
<LI><a href="#[2c5e5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthSnmpIn
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_SNMP
</UL>

<P><STRONG><a name="[2a4cee8]"></a>mn_snmp_tick</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, snmptick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a4cfc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_isr
</UL>

<P><STRONG><a name="[28abb58]"></a>mn_snmp_trap</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, snmptrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936 + Unknown Stack Size
<LI>Call Chain = mn_snmp_trap &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[28cfec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open
<LI><a href="#[2a5dfe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send
<LI><a href="#[2c551d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthVBTable
<LI><a href="#[2c56850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateTrap
<LI><a href="#[2d853b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVBTableByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d23d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_disconnect_alarm
<LI><a href="#[d23d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_condition_alarm
<LI><a href="#[d23dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_char_alarm
<LI><a href="#[d23e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_accessed_alarm
<LI><a href="#[d23eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_changed_alarm
<LI><a href="#[28c17b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_on_alarm
</UL>

<P><STRONG><a name="[2c5e5d0]"></a>getLengthSnmpIn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, snmputil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2adf950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_SNMP
<LI><a href="#[2c5b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucCheckSetVariables
<LI><a href="#[2c5b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariables
<LI><a href="#[2c5b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveOidToTemp
<LI><a href="#[2c5b420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveDataInputToOutput
<LI><a href="#[2c5ca58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getErrorV1
<LI><a href="#[2c5e540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucGetResponse
<LI><a href="#[2c5fe90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucCheckCommunity
</UL>

<P><STRONG><a name="[2c551d0]"></a>getLengthVBTable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, snmputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getLengthVBTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2d853b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVBTableByte
</UL>
<BR>[Called By]<UL><LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
<LI><a href="#[2c53728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucFindOID
<LI><a href="#[2c5b2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMoveOidVariableToOutput
<LI><a href="#[2c5b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucCheckSetVariables
<LI><a href="#[2c5b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariables
</UL>

<P><STRONG><a name="[2c5b3d8]"></a>MoveOidToTemp</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, snmputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MoveOidToTemp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5e5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthSnmpIn
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucCheckSetVariables
<LI><a href="#[2c5b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariables
<LI><a href="#[2c5e540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucGetResponse
</UL>

<P><STRONG><a name="[2c5b420]"></a>MoveDataInputToOutput</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, snmputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MoveDataInputToOutput
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5e5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthSnmpIn
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5e540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucGetResponse
</UL>

<P><STRONG><a name="[2c5b348]"></a>incOut</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, snmputil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c5b2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMoveOidVariableToOutput
<LI><a href="#[2c5ca58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getErrorV1
<LI><a href="#[2c5e540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucGetResponse
</UL>

<P><STRONG><a name="[2c5b2b8]"></a>ucMoveOidVariableToOutput</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, snmputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ucMoveOidVariableToOutput &rArr; ucFindOID &rArr; getLengthVBTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c53728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucFindOID
<LI><a href="#[2c551d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthVBTable
<LI><a href="#[2c5b348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incOut
<LI><a href="#[2d853b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVBTableByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c56850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateTrap
<LI><a href="#[2c5e540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucGetResponse
</UL>

<P><STRONG><a name="[2c5b300]"></a>ucCheckSetVariables</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, snmputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ucCheckSetVariables &rArr; ucFindOID &rArr; getLengthVBTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c53728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucFindOID
<LI><a href="#[2c551d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthVBTable
<LI><a href="#[2c5b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveOidToTemp
<LI><a href="#[2c5e5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthSnmpIn
<LI><a href="#[2d853b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVBTableByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5e540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucGetResponse
</UL>

<P><STRONG><a name="[2c5b390]"></a>SetVariables</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, snmputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SetVariables &rArr; ucFindOID &rArr; getLengthVBTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c53728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucFindOID
<LI><a href="#[2c551d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthVBTable
<LI><a href="#[2c5b3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveOidToTemp
<LI><a href="#[2c5e5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthSnmpIn
<LI><a href="#[2d85328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVBTableByte
<LI><a href="#[2d853b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVBTableByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5e540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucGetResponse
</UL>

<P><STRONG><a name="[2c5e588]"></a>setOutSeqLen</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, snmputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setOutSeqLen
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_SNMP
<LI><a href="#[2c56850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateTrap
<LI><a href="#[2c5e540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucGetResponse
</UL>

<P><STRONG><a name="[2c52138]"></a>mn_setRamVariable</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, snmputil.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c520a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_incrementMeasVariable
</UL>

<P><STRONG><a name="[2c520f0]"></a>mn_getRamVariable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, snmputil.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c520a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_incrementMeasVariable
</UL>

<P><STRONG><a name="[2c520a8]"></a>mn_incrementMeasVariable</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, snmputil.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c520f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_getRamVariable
<LI><a href="#[2c52138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_setRamVariable
</UL>

<P><STRONG><a name="[2cab608]"></a>mn_getFlashVariable</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, snmputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mn_getFlashVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[2d853b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVBTableByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2897948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_location
<LI><a href="#[28981b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_contact
</UL>

<P><STRONG><a name="[2b61418]"></a>mn_setFlashVariable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, snmputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mn_setFlashVariable
</UL>
<BR>[Calls]<UL><LI><a href="#[2d85328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVBTableByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2899880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_smtpsnmp
</UL>

<P><STRONG><a name="[28d5de0]"></a>rs232_full_init_uart</STRONG> (Thumb, 370 bytes, Stack size 20 bytes, rs232_full_snn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rs232_full_init_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2899910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_serial
<LI><a href="#[28c1ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[2dd7930]"></a>rs232_full_sendchar</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rs232_full_snn.o(.text), UNUSED)

<P><STRONG><a name="[28d5d98]"></a>rs232_gpio_ttl_init_uart</STRONG> (Thumb, 352 bytes, Stack size 20 bytes, rs232_gpio_snn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rs232_gpio_ttl_init_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2899910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_serial
<LI><a href="#[28c1ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[28d5d50]"></a>rs485_init_uart</STRONG> (Thumb, 414 bytes, Stack size 20 bytes, rs485_snn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rs485_init_uart
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19ec8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_switch8 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2899910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_serial
<LI><a href="#[28c1ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART
</UL>

<P><STRONG><a name="[2e1e9c0]"></a>__I_use_semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e1e978]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2e1e6f8]"></a>__printf</STRONG> (Thumb, 748 bytes, Stack size 48 bytes, __printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e19bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r3
<LI><a href="#[2e19c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r2
<LI><a href="#[2e19cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r1
<LI><a href="#[2e1dae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[2e1dcf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[2e1dfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2e1e398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb (Weak Reference)
<LI><a href="#[2e1e3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
<LI><a href="#[2e1e428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[2e1e470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct (Weak Reference)
<LI><a href="#[2e1e4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (Weak Reference)
<LI><a href="#[2e1e500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
<LI><a href="#[2e1e548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (Weak Reference)
<LI><a href="#[2e1e590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e17da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2e1e6b0]"></a>_printf_return_value</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(.text), UNUSED)

<P><STRONG><a name="[2e1e668]"></a>_printf_percent</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(.text), UNUSED)

<P><STRONG><a name="[2e1e620]"></a>_printf_sizespec</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(.text), UNUSED)

<P><STRONG><a name="[2e1e218]"></a>_printf_pre_padding</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, _printf_pad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e19c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e17f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2e1dfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[2e1e1d0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e19c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e17f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2e1dfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[2e1dfe8]"></a>_printf_str</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, _printf_str.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e19bb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r3
<LI><a href="#[2e1e1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2e1e218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2e1dcf0]"></a>_printf_longlong_hex</STRONG> (Thumb, 182 bytes, Stack size 88 bytes, _printf_longlong_hex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e17f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2e1dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2e1dae0]"></a>_printf_int_dec</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, _printf_dec.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e16ff0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[2e17f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2e1da50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[2e1dc60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2e1d858]"></a>__0printf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, __0printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a0328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[2e17da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2e1d810]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, __0printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __1printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail
<LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[28d60b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[28d6140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_set_help
<LI><a href="#[28d6188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_help
<LI><a href="#[28d61d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_settings_mode
<LI><a href="#[28d6218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_settings
<LI><a href="#[2d85448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printVBTable
</UL>

<P><STRONG><a name="[2e1d578]"></a>__0sprintf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, __0sprintf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e17b60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[2e17da8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[2e1d530]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, __0sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __1sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2896fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopbit_func
<LI><a href="#[2897048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_udp_tx_bytes
<LI><a href="#[2897090]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_udp_rx_bytes
<LI><a href="#[28970d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_tx_bytes
<LI><a href="#[28971f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_tcp_tx_bytes
<LI><a href="#[2897240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_tcp_rx_bytes
<LI><a href="#[28974c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rx_bytes
<LI><a href="#[2897558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485type
<LI><a href="#[28975a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485txrx
<LI><a href="#[28975e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485timer
<LI><a href="#[2897630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_retry_timeout
<LI><a href="#[2897678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_retry_counter
<LI><a href="#[28976c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_response
<LI><a href="#[2897750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_protocol
<LI><a href="#[2897798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_pkt_len
<LI><a href="#[2897828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_multi_port
<LI><a href="#[2897d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_icmp_tx_bytes
<LI><a href="#[2897d80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_icmp_rx_bytes
<LI><a href="#[2897ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_fullserial
<LI><a href="#[2898050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_disconnect_by
<LI><a href="#[2898200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connection_type
<LI><a href="#[2898248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connect_on
<LI><a href="#[28983f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_chkd_devs
<LI><a href="#[28985f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_ri
<LI><a href="#[2898680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_ic_evt
<LI><a href="#[2898710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_c2
<LI><a href="#[2898758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_c1
<LI><a href="#[28988c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_ri
<LI><a href="#[2898950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_ic_evt
<LI><a href="#[28989e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_c2
<LI><a href="#[2898a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_c1
<LI><a href="#[2898b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_ri
<LI><a href="#[2898c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_ic_evt
<LI><a href="#[2898cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_c2
<LI><a href="#[2898cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_c1
<LI><a href="#[2898e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_ri
<LI><a href="#[2898ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_ic_evt
<LI><a href="#[2898f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_c2
<LI><a href="#[2898fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_c1
<LI><a href="#[2899130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_ri
<LI><a href="#[28991c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_ic_evt
<LI><a href="#[2899250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_c2
<LI><a href="#[2899298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_c1
<LI><a href="#[289a060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_func
<LI><a href="#[289a138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_of_conns_func
<LI><a href="#[289a450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_func
<LI><a href="#[289a4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;itimeout_func
<LI><a href="#[289a888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flowcontrol_func
<LI><a href="#[289a918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;end_char_func
<LI><a href="#[289abe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;databits_func
<LI><a href="#[289ad08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buff_time_func
<LI><a href="#[289ad98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baud_func
<LI><a href="#[289afd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebPort_func
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[29222b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assume_defaults
<LI><a href="#[293dc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_read
</UL>

<P><STRONG><a name="[2e1d370]"></a>__0sscanf</STRONG> (Thumb, 54 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2e17458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[2899b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_packing
<LI><a href="#[2899e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm5
<LI><a href="#[2899eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm4
<LI><a href="#[2899ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm3
<LI><a href="#[2899f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm2
<LI><a href="#[2899f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm1
<LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
</UL>

<P><STRONG><a name="[2e1d120]"></a>atoi</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e17720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[2e184e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[28971b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_timeout_select
<LI><a href="#[2897990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_load_timeout
<LI><a href="#[28979d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_load_on
<LI><a href="#[2899910]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_serial
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt
<LI><a href="#[2899b08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_packing
<LI><a href="#[2899b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_multihost
<LI><a href="#[2899e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_bridge
<LI><a href="#[2899e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm5
<LI><a href="#[2899eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm4
<LI><a href="#[2899ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm3
<LI><a href="#[2899f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm2
<LI><a href="#[2899f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm1
<LI><a href="#[289a1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_func
<LI><a href="#[28c1768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
</UL>

<P><STRONG><a name="[2e1cf18]"></a>_scanf_int</STRONG> (Thumb, 342 bytes, Stack size 48 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2e17a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2e19cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e163c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[2e1ccf0]"></a>gets</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gets.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gets &rArr; fgetc
</UL>
<BR>[Calls]<UL><LI><a href="#[28a0328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[28a0370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[28d60b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[28d61d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_settings_mode
</UL>

<P><STRONG><a name="[2e1cae8]"></a>memcmp</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d23cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_find_socket
<LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[d24378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_remote_socket
<LI><a href="#[d2a048]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_remote_UDP_socket
<LI><a href="#[2855758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_recv_header
<LI><a href="#[2878b68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_search_entry
<LI><a href="#[28997f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_system_admin
<LI><a href="#[2899958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security_admin
<LI><a href="#[2899cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_chk_login_passwd
<LI><a href="#[2899d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_serial
<LI><a href="#[2899d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_login
<LI><a href="#[2899dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_admin
<LI><a href="#[2899fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_admin
<LI><a href="#[289a3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[28d60b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console
<LI><a href="#[28d61d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_settings_mode
<LI><a href="#[293dc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cpswd
<LI><a href="#[2a3f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_send_header
</UL>

<P><STRONG><a name="[2e1c928]"></a>__aeabi_memset</STRONG> (ARM, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e1c4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[28971b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_timeout_select (via Veneer)
<LI><a href="#[28979d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_load_on (via Veneer)
<LI><a href="#[2899520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_timeout_func (via Veneer)
<LI><a href="#[28c1b10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnInitFlashDriver (via Veneer)
<LI><a href="#[29222b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assume_defaults (via Veneer)
<LI><a href="#[292e1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBytesFlash (via Veneer)
<LI><a href="#[292f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite (via Veneer)
</UL>

<P><STRONG><a name="[2e1c778]"></a>__aeabi_memcpy</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d24180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialToEthernet (via Veneer)
<LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle (via Veneer)
<LI><a href="#[d24450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_send_complete (via Veneer)
<LI><a href="#[d24570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_get_send_size (via Veneer)
<LI><a href="#[28557a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ping_pkt (via Veneer)
<LI><a href="#[2872568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_dns_addr (via Veneer)
<LI><a href="#[28725b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_server_id (via Veneer)
<LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet (via Veneer)
<LI><a href="#[2872688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcp_packet (via Veneer)
<LI><a href="#[2899880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_smtpsnmp (via Veneer)
<LI><a href="#[28999a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security (via Veneer)
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt (via Veneer)
<LI><a href="#[2899b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_multihost (via Veneer)
<LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command (via Veneer)
<LI><a href="#[2899d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_serial (via Veneer)
<LI><a href="#[2899d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_login (via Veneer)
<LI><a href="#[2899dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_admin (via Veneer)
<LI><a href="#[2899e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_bridge (via Veneer)
<LI><a href="#[289a1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_func (via Veneer)
<LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail (via Veneer)
<LI><a href="#[28c1768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash (via Veneer)
<LI><a href="#[28c19a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_assign_interface (via Veneer)
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all (via Veneer)
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt (via Veneer)
<LI><a href="#[2922100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setVBTableToFlash (via Veneer)
<LI><a href="#[2922148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVBTableFromFlash (via Veneer)
<LI><a href="#[292e1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBytesFlash (via Veneer)
<LI><a href="#[292e230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetParsFile (via Veneer)
<LI><a href="#[292f118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileWrite (via Veneer)
<LI><a href="#[292f160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uFileCloseMime (via Veneer)
<LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd (via Veneer)
<LI><a href="#[2a33d18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_send (via Veneer)
<LI><a href="#[2a3f220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_copy_recv_buff (via Veneer)
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv (via Veneer)
<LI><a href="#[2ce3de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reading (via Veneer)
</UL>

<P><STRONG><a name="[2e1c730]"></a>__rt_memcpy</STRONG> (ARM, 212 bytes, Stack size 0 bytes, rt_memcpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1c2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[2e1c6e8]"></a>_memcpy_lastbytes</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[2e1c530]"></a>__aeabi_memclr</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2877410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_init (via Veneer)
<LI><a href="#[2899b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_multihost (via Veneer)
<LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command (via Veneer)
<LI><a href="#[29222b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assume_defaults (via Veneer)
<LI><a href="#[2a3f388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_init (via Veneer)
<LI><a href="#[2ad3050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_init (via Veneer)
<LI><a href="#[2ce3de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reading (via Veneer)
</UL>

<P><STRONG><a name="[2e1c4e8]"></a>__rt_memclr</STRONG> (ARM, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1bf50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[2e1c4a0]"></a>_memset</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1c928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2e1c2e8]"></a>__aeabi_memcpy4</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d23d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isvr_condition_alarm (via Veneer)
<LI><a href="#[2896fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopbit_func (via Veneer)
<LI><a href="#[2897558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485type (via Veneer)
<LI><a href="#[28975a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485txrx (via Veneer)
<LI><a href="#[2897750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_protocol (via Veneer)
<LI><a href="#[2898050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_disconnect_by (via Veneer)
<LI><a href="#[2898200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connection_type (via Veneer)
<LI><a href="#[2898248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connect_on (via Veneer)
<LI><a href="#[2898680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_ic_evt (via Veneer)
<LI><a href="#[2898950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_ic_evt (via Veneer)
<LI><a href="#[2898c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_ic_evt (via Veneer)
<LI><a href="#[2898ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_ic_evt (via Veneer)
<LI><a href="#[28991c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_ic_evt (via Veneer)
<LI><a href="#[289a060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_func (via Veneer)
<LI><a href="#[289a138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_of_conns_func (via Veneer)
<LI><a href="#[289a888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flowcontrol_func (via Veneer)
<LI><a href="#[289abe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;databits_func (via Veneer)
<LI><a href="#[289ad98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baud_func (via Veneer)
<LI><a href="#[28d6218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_settings (via Veneer)
<LI><a href="#[293dc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_read (via Veneer)
<LI><a href="#[2ac26a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;np_atoi (via Veneer)
<LI><a href="#[2e1c730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[2e1c2a0]"></a>__aeabi_memcpy8</STRONG> (ARM, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2e1c258]"></a>__rt_memcpy_w</STRONG> (ARM, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2e1c210]"></a>_memcpy_lastbytes_aligned</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2e1c028]"></a>__aeabi_memclr4</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2855758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ip_recv_header (via Veneer)
<LI><a href="#[2861fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_init (via Veneer)
<LI><a href="#[2870ea0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_init (via Veneer)
<LI><a href="#[28771d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open_socket (via Veneer)
<LI><a href="#[2896fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopbit_func (via Veneer)
<LI><a href="#[2897558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485type (via Veneer)
<LI><a href="#[28975a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485txrx (via Veneer)
<LI><a href="#[2897750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_protocol (via Veneer)
<LI><a href="#[2898050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_disconnect_by (via Veneer)
<LI><a href="#[2898200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connection_type (via Veneer)
<LI><a href="#[2898248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connect_on (via Veneer)
<LI><a href="#[2898680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_ic_evt (via Veneer)
<LI><a href="#[2898950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_ic_evt (via Veneer)
<LI><a href="#[2898c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_ic_evt (via Veneer)
<LI><a href="#[2898ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_ic_evt (via Veneer)
<LI><a href="#[28991c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_ic_evt (via Veneer)
<LI><a href="#[28997f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_system_admin (via Veneer)
<LI><a href="#[2899958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security_admin (via Veneer)
<LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command (via Veneer)
<LI><a href="#[2899cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_chk_login_passwd (via Veneer)
<LI><a href="#[2899fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_admin (via Veneer)
<LI><a href="#[289a060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_func (via Veneer)
<LI><a href="#[289a138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_of_conns_func (via Veneer)
<LI><a href="#[289a3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func (via Veneer)
<LI><a href="#[289a888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flowcontrol_func (via Veneer)
<LI><a href="#[289abe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;databits_func (via Veneer)
<LI><a href="#[289ad98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baud_func (via Veneer)
<LI><a href="#[28c1768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash (via Veneer)
<LI><a href="#[28c18d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_init (via Veneer)
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all (via Veneer)
<LI><a href="#[28d60b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console (via Veneer)
<LI><a href="#[28d61d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_settings_mode (via Veneer)
<LI><a href="#[2ce3de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reading (via Veneer)
</UL>

<P><STRONG><a name="[2e1bfe0]"></a>__aeabi_memclr8</STRONG> (ARM, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2e1bf98]"></a>__rt_memclr_w</STRONG> (ARM, 84 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[2e1bf50]"></a>_memset_w</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1c4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[2e1bd78]"></a>strcpy</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d23be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_packet
<LI><a href="#[2872688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcp_packet
<LI><a href="#[2896e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_func
<LI><a href="#[2896fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopbit_func
<LI><a href="#[2897000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_wsa
<LI><a href="#[2897168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_trap_en
<LI><a href="#[28971b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_timeout_select
<LI><a href="#[28972d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_spca
<LI><a href="#[2897318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_snmp_en
<LI><a href="#[28973a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_smtp
<LI><a href="#[28973f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_serial_msg
<LI><a href="#[2897510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rts
<LI><a href="#[2897558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485type
<LI><a href="#[28975a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485txrx
<LI><a href="#[2897708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_pswd_msg
<LI><a href="#[2897750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_protocol
<LI><a href="#[28978b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_login_msg
<LI><a href="#[28979d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_load_on
<LI><a href="#[2897a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ipx
<LI><a href="#[2897dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ica
<LI><a href="#[2897f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_dtr
<LI><a href="#[2897fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_dsr
<LI><a href="#[2898050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_disconnect_by
<LI><a href="#[2898098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_dcd
<LI><a href="#[28980e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_cts
<LI><a href="#[2898200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connection_type
<LI><a href="#[2898248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connect_on
<LI><a href="#[2898320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_cio
<LI><a href="#[2898440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_admin_msg
<LI><a href="#[28984d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_to
<LI><a href="#[28985a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_sic_evt
<LI><a href="#[2898638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_msg
<LI><a href="#[2898680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_ic_evt
<LI><a href="#[28987a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_to
<LI><a href="#[2898878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_sic_evt
<LI><a href="#[2898908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_msg
<LI><a href="#[2898950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_ic_evt
<LI><a href="#[2898a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_to
<LI><a href="#[2898b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_sic_evt
<LI><a href="#[2898bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_msg
<LI><a href="#[2898c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_ic_evt
<LI><a href="#[2898d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_to
<LI><a href="#[2898e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_sic_evt
<LI><a href="#[2898ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_msg
<LI><a href="#[2898ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_ic_evt
<LI><a href="#[2899010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_to
<LI><a href="#[28990e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_sic_evt
<LI><a href="#[2899178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_msg
<LI><a href="#[28991c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_ic_evt
<LI><a href="#[28992e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmp_func
<LI><a href="#[2899370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_units_func
<LI><a href="#[2899400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_name_func
<LI><a href="#[2899490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cmd_func
<LI><a href="#[28995b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_func
<LI><a href="#[2899688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s10_func
<LI><a href="#[28996d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s100_func
<LI><a href="#[28997a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_updatedevparam
<LI><a href="#[28997f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_system_admin
<LI><a href="#[2899880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_smtpsnmp
<LI><a href="#[2899958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security_admin
<LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command
<LI><a href="#[2899cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_chk_login_passwd
<LI><a href="#[2899e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm5
<LI><a href="#[2899eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm4
<LI><a href="#[2899ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm3
<LI><a href="#[2899f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm2
<LI><a href="#[2899f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm1
<LI><a href="#[2899fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_admin
<LI><a href="#[289a018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_func
<LI><a href="#[289a060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_func
<LI><a href="#[289a138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_of_conns_func
<LI><a href="#[289a258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_func
<LI><a href="#[289a2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_func
<LI><a href="#[289a330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_pf_set_entry
<LI><a href="#[289a378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_gf_set_entry
<LI><a href="#[289a3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[289a720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hduplex_func
<LI><a href="#[289a840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwd_endchar_func
<LI><a href="#[289a888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flowcontrol_func
<LI><a href="#[289a8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fduplex_func
<LI><a href="#[289a9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpflag_func
<LI><a href="#[289aa38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_func
<LI><a href="#[289ab58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_all_func
<LI><a href="#[289abe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;databits_func
<LI><a href="#[289ad98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baud_func
<LI><a href="#[289ade0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autonegotiate_func
<LI><a href="#[28a0b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_start_session
<LI><a href="#[28c1de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_task
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[28d6218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_settings
<LI><a href="#[29222b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assume_defaults
<LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
<LI><a href="#[293dc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_read
<LI><a href="#[2acf058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vf_entry
<LI><a href="#[2ad46d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_load_buff
<LI><a href="#[2cb52e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_chk_func
<LI><a href="#[2cb5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_name_func
<LI><a href="#[2cb5378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_cmd_func
<LI><a href="#[2cb53c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_units_func
<LI><a href="#[2ce3de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reading
</UL>

<P><STRONG><a name="[2e1bbb8]"></a>strncmp</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
</UL>

<P><STRONG><a name="[2e1b9f8]"></a>strlen</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d23be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_packet
<LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
<LI><a href="#[2861b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_get_entry
<LI><a href="#[28671a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeHTTPHeader
<LI><a href="#[2896e08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version_func
<LI><a href="#[2896fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopbit_func
<LI><a href="#[2897000]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_wsa
<LI><a href="#[2897168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_trap_en
<LI><a href="#[28971b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_timeout_select
<LI><a href="#[2897288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_sub
<LI><a href="#[28972d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_spca
<LI><a href="#[2897318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_snmp_en
<LI><a href="#[28973a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_smtp
<LI><a href="#[28973f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_serial_msg
<LI><a href="#[2897438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_serial
<LI><a href="#[2897480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_s_no
<LI><a href="#[2897510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rts
<LI><a href="#[2897558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485type
<LI><a href="#[28975a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485txrx
<LI><a href="#[28975e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485timer
<LI><a href="#[2897708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_pswd_msg
<LI><a href="#[2897750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_protocol
<LI><a href="#[28977e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_o_chk
<LI><a href="#[2897828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_multi_port
<LI><a href="#[2897870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_mipaddr
<LI><a href="#[28978b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_login_msg
<LI><a href="#[2897900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_login
<LI><a href="#[2897948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_location
<LI><a href="#[2897990]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_load_timeout
<LI><a href="#[28979d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_load_on
<LI><a href="#[2897a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_l_chk
<LI><a href="#[2897a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ipx
<LI><a href="#[2897cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_image_source
<LI><a href="#[2897dc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ica
<LI><a href="#[2897e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_i_chk
<LI><a href="#[2897e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_h_chk
<LI><a href="#[2897ee8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_from
<LI><a href="#[2897f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_fio_status
<LI><a href="#[2897f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_dtr
<LI><a href="#[2897fc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_dsr
<LI><a href="#[2898050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_disconnect_by
<LI><a href="#[2898098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_dcd
<LI><a href="#[28980e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_cts
<LI><a href="#[2898128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ct_o_chk
<LI><a href="#[2898170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ct_i_chk
<LI><a href="#[28981b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_contact
<LI><a href="#[2898200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connection_type
<LI><a href="#[2898248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connect_on
<LI><a href="#[2898290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_community
<LI><a href="#[28982d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_cio_status
<LI><a href="#[2898320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_cio
<LI><a href="#[2898368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ci_o_chk
<LI><a href="#[28983b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ci_i_chk
<LI><a href="#[28983f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_chkd_devs
<LI><a href="#[2898440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_admin_msg
<LI><a href="#[2898488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_admin
<LI><a href="#[28984d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_to
<LI><a href="#[2898518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_t_chk
<LI><a href="#[2898560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_sspd
<LI><a href="#[28985a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_sic_evt
<LI><a href="#[28985f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_ri
<LI><a href="#[2898638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_msg
<LI><a href="#[2898680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_ic_evt
<LI><a href="#[28986c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_e_chk
<LI><a href="#[2898710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_c2
<LI><a href="#[2898758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_c1
<LI><a href="#[28987a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_to
<LI><a href="#[28987e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_t_chk
<LI><a href="#[2898830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_sspd
<LI><a href="#[2898878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_sic_evt
<LI><a href="#[28988c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_ri
<LI><a href="#[2898908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_msg
<LI><a href="#[2898950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_ic_evt
<LI><a href="#[2898998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_e_chk
<LI><a href="#[28989e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_c2
<LI><a href="#[2898a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_c1
<LI><a href="#[2898a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_to
<LI><a href="#[2898ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_t_chk
<LI><a href="#[2898b00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_sspd
<LI><a href="#[2898b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_sic_evt
<LI><a href="#[2898b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_ri
<LI><a href="#[2898bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_msg
<LI><a href="#[2898c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_ic_evt
<LI><a href="#[2898c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_e_chk
<LI><a href="#[2898cb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_c2
<LI><a href="#[2898cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_c1
<LI><a href="#[2898d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_to
<LI><a href="#[2898d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_t_chk
<LI><a href="#[2898dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_sspd
<LI><a href="#[2898e18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_sic_evt
<LI><a href="#[2898e60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_ri
<LI><a href="#[2898ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_msg
<LI><a href="#[2898ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_ic_evt
<LI><a href="#[2898f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_e_chk
<LI><a href="#[2898f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_c2
<LI><a href="#[2898fc8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_c1
<LI><a href="#[2899010]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_to
<LI><a href="#[2899058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_t_chk
<LI><a href="#[28990a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_sspd
<LI><a href="#[28990e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_sic_evt
<LI><a href="#[2899130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_ri
<LI><a href="#[2899178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_msg
<LI><a href="#[28991c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_ic_evt
<LI><a href="#[2899208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_e_chk
<LI><a href="#[2899250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_c2
<LI><a href="#[2899298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_c1
<LI><a href="#[28992e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snmp_func
<LI><a href="#[2899370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_units_func
<LI><a href="#[2899400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_name_func
<LI><a href="#[2899448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_idnum_func
<LI><a href="#[2899490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_cmd_func
<LI><a href="#[28995b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_func
<LI><a href="#[2899688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s10_func
<LI><a href="#[28996d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;s100_func
<LI><a href="#[28997f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_system_admin
<LI><a href="#[2899958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_security_admin
<LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command
<LI><a href="#[2899cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_chk_login_passwd
<LI><a href="#[2899d48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_serial
<LI><a href="#[2899d90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_login
<LI><a href="#[2899dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_change_admin
<LI><a href="#[2899fd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_admin
<LI><a href="#[289a018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_func
<LI><a href="#[289a060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_func
<LI><a href="#[289a138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_of_conns_func
<LI><a href="#[289a258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_func
<LI><a href="#[289a2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_func
<LI><a href="#[289a3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_func
<LI><a href="#[289a6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hname_func
<LI><a href="#[289a720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hduplex_func
<LI><a href="#[289a840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwd_endchar_func
<LI><a href="#[289a888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flowcontrol_func
<LI><a href="#[289a8d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fduplex_func
<LI><a href="#[289a9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcpflag_func
<LI><a href="#[289aa38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dhcp_func
<LI><a href="#[289ab10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_read_func
<LI><a href="#[289ab58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_all_func
<LI><a href="#[289abe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;databits_func
<LI><a href="#[289ad98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baud_func
<LI><a href="#[289ade0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autonegotiate_func
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all
<LI><a href="#[28cfe80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_port2002_process_packet
<LI><a href="#[28d60b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[28d61d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_settings_mode
<LI><a href="#[293dbc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port2002_handler
<LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
<LI><a href="#[293dc98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cpswd
<LI><a href="#[2ad4688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_send
<LI><a href="#[2ad46d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_load_buff
<LI><a href="#[2b57638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spswd_func
<LI><a href="#[2b57680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_space
<LI><a href="#[2c5fe90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucCheckCommunity
<LI><a href="#[2cb52e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_chk_func
<LI><a href="#[2cb5330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_name_func
<LI><a href="#[2cb5378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_cmd_func
<LI><a href="#[2cb53c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_units_func
<LI><a href="#[2ce3de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reading
</UL>

<P><STRONG><a name="[2e1b840]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[289a1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;network_func (via Veneer)
<LI><a href="#[2e144f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2e1b630]"></a>strtok</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strtok &rArr; __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e17248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt
<LI><a href="#[293dc08]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_cmd
</UL>

<P><STRONG><a name="[2e1b478]"></a>strcat</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2896fb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopbit_func
<LI><a href="#[28971b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_timeout_select
<LI><a href="#[2897480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_s_no
<LI><a href="#[2897558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485type
<LI><a href="#[28975a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485txrx
<LI><a href="#[2897750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_protocol
<LI><a href="#[28977e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_o_chk
<LI><a href="#[2897828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_multi_port
<LI><a href="#[2897870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_mipaddr
<LI><a href="#[28979d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_load_on
<LI><a href="#[2897a20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_l_chk
<LI><a href="#[2897cf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_image_source
<LI><a href="#[2897e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_i_chk
<LI><a href="#[2897e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_h_chk
<LI><a href="#[2897f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_fio_status
<LI><a href="#[2898050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_disconnect_by
<LI><a href="#[2898128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ct_o_chk
<LI><a href="#[2898170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ct_i_chk
<LI><a href="#[2898200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connection_type
<LI><a href="#[2898248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_connect_on
<LI><a href="#[28982d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_cio_status
<LI><a href="#[2898368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ci_o_chk
<LI><a href="#[28983b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_ci_i_chk
<LI><a href="#[2898518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_t_chk
<LI><a href="#[2898680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_ic_evt
<LI><a href="#[28986c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_e_chk
<LI><a href="#[28987e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_t_chk
<LI><a href="#[2898950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_ic_evt
<LI><a href="#[2898998]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_e_chk
<LI><a href="#[2898ab8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_t_chk
<LI><a href="#[2898c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_ic_evt
<LI><a href="#[2898c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_e_chk
<LI><a href="#[2898d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_t_chk
<LI><a href="#[2898ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_ic_evt
<LI><a href="#[2898f38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_e_chk
<LI><a href="#[2899058]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_t_chk
<LI><a href="#[28991c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_ic_evt
<LI><a href="#[2899208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_e_chk
<LI><a href="#[28995b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_func
<LI><a href="#[289a018]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_func
<LI><a href="#[289a060]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parity_func
<LI><a href="#[289a138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_of_conns_func
<LI><a href="#[289a888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flowcontrol_func
<LI><a href="#[289ab10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_read_func
<LI><a href="#[289abe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;databits_func
<LI><a href="#[289ad98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baud_func
<LI><a href="#[28a0bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_send_mail
<LI><a href="#[29222b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assume_defaults
<LI><a href="#[293dc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_read
<LI><a href="#[2ad46d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_load_buff
<LI><a href="#[2ce3d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sno
<LI><a href="#[2ce3d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_dev_name
<LI><a href="#[2ce3de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reading
<LI><a href="#[2ce3e28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_unit
</UL>

<P><STRONG><a name="[2e1b358]"></a>strchr</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command
</UL>

<P><STRONG><a name="[2e1b0d0]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[2e1b088]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[2e1a390]"></a>__use_two_region_memory</STRONG> (ARM, 4 bytes, Stack size 0 bytes, stkheap2.o(.text), UNUSED)

<P><STRONG><a name="[2e1a348]"></a>__rt_stackheap_init</STRONG> (ARM, 36 bytes, Stack size 16 bytes, stkheap2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_stackheap_init &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2e180e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_storage
<LI><a href="#[2e18cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2e19278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e1a300]"></a>__rt_heap_extend</STRONG> (ARM, 24 bytes, Stack size 8 bytes, stkheap2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1a228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[2e19ec8]"></a>__ARM_switch8</STRONG> (ARM, 24 bytes, Stack size 0 bytes, switch8.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d23b98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_recv_byte (via Veneer)
<LI><a href="#[2897480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_s_no (via Veneer)
<LI><a href="#[2897558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485type (via Veneer)
<LI><a href="#[28975a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485txrx (via Veneer)
<LI><a href="#[28975e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_rs485timer (via Veneer)
<LI><a href="#[2897f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_fio_status (via Veneer)
<LI><a href="#[2898050]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_disconnect_by (via Veneer)
<LI><a href="#[28982d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_cio_status (via Veneer)
<LI><a href="#[2898680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a5_ic_evt (via Veneer)
<LI><a href="#[2898950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a4_ic_evt (via Veneer)
<LI><a href="#[2898c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a3_ic_evt (via Veneer)
<LI><a href="#[2898ef0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a2_ic_evt (via Veneer)
<LI><a href="#[28991c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ssi_a1_ic_evt (via Veneer)
<LI><a href="#[28995b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_func (via Veneer)
<LI><a href="#[28999e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_rst_cnt (via Veneer)
<LI><a href="#[2899be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_load (via Veneer)
<LI><a href="#[2899e68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm5 (via Veneer)
<LI><a href="#[2899eb0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm4 (via Veneer)
<LI><a href="#[2899ef8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm3 (via Veneer)
<LI><a href="#[2899f40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm2 (via Veneer)
<LI><a href="#[2899f88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_alarm1 (via Veneer)
<LI><a href="#[289a138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;no_of_conns_func (via Veneer)
<LI><a href="#[289a258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_func (via Veneer)
<LI><a href="#[289a888]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flowcontrol_func (via Veneer)
<LI><a href="#[289ad98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baud_func (via Veneer)
<LI><a href="#[28abb10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_mail (via Veneer)
<LI><a href="#[28d5d50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_init_uart (via Veneer)
<LI><a href="#[28d5d98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_gpio_ttl_init_uart (via Veneer)
<LI><a href="#[28d5de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_full_init_uart (via Veneer)
<LI><a href="#[28d60f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_prompt (via Veneer)
<LI><a href="#[28d6218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_all_settings (via Veneer)
<LI><a href="#[293dc50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_read (via Veneer)
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv (via Veneer)
<LI><a href="#[2cb5258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_call_func (via Veneer)
<LI><a href="#[2cda098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_of_io (via Veneer)
</UL>

<P><STRONG><a name="[2e19e80]"></a>__rt_switch8</STRONG> (ARM, 0 bytes, Stack size 0 bytes, switch8.o(.text), UNUSED)

<P><STRONG><a name="[2e19d60]"></a>__ARM_call_via_r0</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e19d18]"></a>__call_via_r0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e19cd0]"></a>__ARM_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d23be0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_packet
<LI><a href="#[2867278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_func
<LI><a href="#[2e163c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[2e1cf18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2e19c88]"></a>__call_via_r1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e19c40]"></a>__ARM_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c44a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fl_EraseLastSector
<LI><a href="#[2c44a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fl_ProgramLastSector
<LI><a href="#[2e163c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[2e16660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_outstr_char
<LI><a href="#[2e17f70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[2e1e1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2e1e218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2e19bf8]"></a>__call_via_r2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e19bb0]"></a>__ARM_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1dfe8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[2e19b68]"></a>__call_via_r3</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e19b20]"></a>__ARM_call_via_r4</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292d880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFlashCommand
</UL>

<P><STRONG><a name="[2e19ad8]"></a>__call_via_r4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e19a90]"></a>__ARM_call_via_r5</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e19a48]"></a>__call_via_r5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e19a00]"></a>__ARM_call_via_r6</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e199b8]"></a>__call_via_r6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e19970]"></a>__ARM_call_via_r7</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e19928]"></a>__call_via_r7</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, callvia.o(.text), UNUSED)

<P><STRONG><a name="[2e19278]"></a>__rt_entry</STRONG> (ARM, 76 bytes, Stack size 16 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = __rt_entry &rArr; __rt_lib_init &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e14cc0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_lib_init
<LI><a href="#[2e14e30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
<LI><a href="#[2e15f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
<LI><a href="#[2e1a348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e104a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2e1a0c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2e19230]"></a>__rt_exit</STRONG> (ARM, 20 bytes, Stack size 8 bytes, kernel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __rt_exit &rArr; __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[2e15770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e15f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[2e191e8]"></a>__rt_abort</STRONG> (ARM, 8 bytes, Stack size 0 bytes, kernel.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28a0298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[2e18cb8]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d33478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2e16d60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1a348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[2e184e0]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e16098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul (via Veneer)
<LI><a href="#[2e17720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via Veneer)
<LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
</UL>

<P><STRONG><a name="[2e18498]"></a>__rt_errno_addr_intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2e180e0]"></a>__rt_stackheap_storage</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_stackheap_storage_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1a348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_stackheap_init
</UL>

<P><STRONG><a name="[2e17f70]"></a>_printf_int_common</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, _printf_intcommon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e19c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r2
<LI><a href="#[2e1e1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[2e1e218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1dae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[2e1dcf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>

<P><STRONG><a name="[2e17da8]"></a>_printf_char_common</STRONG> (Thumb, 44 bytes, Stack size 88 bytes, _printf_char_common.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1d578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[2e1d858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[2e17b60]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1d578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __0sprintf.o(.text)
</UL>
<P><STRONG><a name="[2e17a40]"></a>_chval</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e16098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2e1cf18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[2e17920]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[2e178d8]"></a>_sbackspace</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[2e17720]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e16098]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2e169e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[2e184e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1d120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[2e17458]"></a>__vfscanf_char</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2e163c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1d370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[2e17248]"></a>__strtok_internal</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, strtok_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __strtok_internal &rArr; strspn
</UL>
<BR>[Calls]<UL><LI><a href="#[2e15bf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[2e15d68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1b630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
</UL>

<P><STRONG><a name="[2e16ff0]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1dae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[2e16da8]"></a>__user_libspace</STRONG> (ARM, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2e16d60]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e18cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e16d18]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2e169e0]"></a>__rt_ctype_table</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2e14788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[2e167d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace (via Veneer)
<LI><a href="#[2e17720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via Veneer)
</UL>

<P><STRONG><a name="[2e167d0]"></a>isspace</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2e169e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[2e16660]"></a>_printf_outstr_char</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_outstr_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _printf_outstr_char
</UL>
<BR>[Calls]<UL><LI><a href="#[2e19c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[2e164e8]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_input_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[2e163c8]"></a>__vfscanf</STRONG> (Thumb, 960 bytes, Stack size 104 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[2e16218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring (Weak Reference)
<LI><a href="#[2e16260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb (Weak Reference)
<LI><a href="#[2e162a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string (Weak Reference)
<LI><a href="#[2e162f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real (Weak Reference)
<LI><a href="#[2e16338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc (Weak Reference)
<LI><a href="#[2e16380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong (Weak Reference)
<LI><a href="#[2e19c40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r2
<LI><a href="#[2e19cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r1
<LI><a href="#[2e1cf18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[2e17458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[2e16098]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e17a40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[2e184e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e17720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2e15f18]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exit &rArr; __rt_exit &rArr; __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[2e15e88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[2e19230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e19278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e15d68]"></a>strcspn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[2e17248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[2e15bf8]"></a>strspn</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[2e17248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtok_internal
</UL>

<P><STRONG><a name="[2e157b8]"></a>__rt_lib_init</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = __rt_lib_init &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e138b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init (via Veneer)
<LI><a href="#[2e144f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via Veneer)
<LI><a href="#[2e14788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
<LI><a href="#[2e15218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_signal_init (Weak Reference)
<LI><a href="#[2e15260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init (Weak Reference)
<LI><a href="#[2e152a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio (Weak Reference)
<LI><a href="#[2e152f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_user_alloc (Weak Reference)
<LI><a href="#[2e15338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc (Weak Reference)
<LI><a href="#[2e15380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getenv_init (Weak Reference)
<LI><a href="#[2e153c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time (Weak Reference)
<LI><a href="#[2e15410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (Weak Reference)
<LI><a href="#[2e15458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_monetary (Weak Reference)
<LI><a href="#[2e154a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_collate (Weak Reference)
<LI><a href="#[2e154e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_trap_init (Weak Reference)
<LI><a href="#[2e15530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clock_init (Weak Reference)
<LI><a href="#[2e15578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atexit_init (Weak Reference)
<LI><a href="#[2e15608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_ (Weak Reference)
<LI><a href="#[2e15650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__alloca_initialize (Weak Reference)
<LI><a href="#[2e15698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_DescSize (Weak Reference)
<LI><a href="#[2e156e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_init (Weak Reference)
<LI><a href="#[2e15848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_argv_veneer (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e19278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry (via Veneer)
</UL>

<P><STRONG><a name="[2e15770]"></a>__rt_lib_shutdown</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_lib_shutdown
</UL>
<BR>[Calls]<UL><LI><a href="#[2e15188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio (Weak Reference)
<LI><a href="#[2e151d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_user_alloc (Weak Reference)
<LI><a href="#[2e155c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e19230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
</UL>

<P><STRONG><a name="[2e14e30]"></a>_platform_post_stackheap_init</STRONG> (ARM, 12 bytes, Stack size 0 bytes, boardinit2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e19278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e14cc0]"></a>_platform_post_lib_init</STRONG> (ARM, 16 bytes, Stack size 8 bytes, boardinit3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _platform_post_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e19278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2e14788]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
<LI><a href="#[2e169e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[2e13a90]"></a>__ARM_get_argv</STRONG> (Thumb, 6 bytes, Stack size 4 bytes, no_argv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __ARM_get_argv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_init.o(.emb_text)
</UL>
<P><STRONG><a name="[2e13120]"></a>__rt_fp_status_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_fp_status_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e138b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[2e1b040]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[2e1aff8]"></a>__aeabi_uidivmod</STRONG> (ARM, 28 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[2e1b118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[2e1b160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div4
<LI><a href="#[2e1b1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[2861b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ustoa (via Veneer)
<LI><a href="#[2b14b50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_uctoa (via Veneer)
</UL>

<P><STRONG><a name="[d24210]"></a>K_OS_Disable_Interrupts</STRONG> (ARM, 0 bytes, Stack size unknown bytes, arm_env.o(cmxenv))
<BR><BR>[Called By]<UL><LI><a href="#[d24180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialToEthernet (via Veneer)
<LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle (via Veneer)
<LI><a href="#[2855710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_recv (via Veneer)
<LI><a href="#[2877068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_transmit_ready (via Veneer)
<LI><a href="#[2877188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_byte (via Veneer)
<LI><a href="#[2877260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_discard_packet (via Veneer)
<LI><a href="#[28772a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_get_timer_tick (via Veneer)
<LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command (via Veneer)
<LI><a href="#[28c1768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash (via Veneer)
<LI><a href="#[28c1ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART (via Veneer)
<LI><a href="#[28c1ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_default (via Veneer)
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all (via Veneer)
<LI><a href="#[29222b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assume_defaults (via Veneer)
<LI><a href="#[2953f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_return_package (via Veneer)
<LI><a href="#[2a3f220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_copy_recv_buff (via Veneer)
<LI><a href="#[2a4cf78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_init (via Veneer)
<LI><a href="#[2ad69c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_byte_present (via Veneer)
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv (via Veneer)
<LI><a href="#[2b17dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_inactivity_timer (via Veneer)
<LI><a href="#[2c44a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fl_EraseLastSector (via Veneer)
<LI><a href="#[2c44a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fl_ProgramLastSector (via Veneer)
<LI><a href="#[2c56850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateTrap (via Veneer)
<LI><a href="#[2ce3de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reading (via Veneer)
</UL>

<P><STRONG><a name="[d241c8]"></a>K_OS_Enable_Interrupts</STRONG> (ARM, 0 bytes, Stack size unknown bytes, arm_env.o(cmxenv))
<BR><BR>[Called By]<UL><LI><a href="#[d24180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SerialToEthernet (via Veneer)
<LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle (via Veneer)
<LI><a href="#[2855710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_recv (via Veneer)
<LI><a href="#[2877068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_transmit_ready (via Veneer)
<LI><a href="#[2877188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_byte (via Veneer)
<LI><a href="#[2877260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_discard_packet (via Veneer)
<LI><a href="#[28772a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_get_timer_tick (via Veneer)
<LI><a href="#[2899c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;post_command (via Veneer)
<LI><a href="#[28c1768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash (via Veneer)
<LI><a href="#[28c1ac8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initUART (via Veneer)
<LI><a href="#[28c1ba0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_write_default (via Veneer)
<LI><a href="#[28cfa00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_all (via Veneer)
<LI><a href="#[29222b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assume_defaults (via Veneer)
<LI><a href="#[2953f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_return_package (via Veneer)
<LI><a href="#[2a3f220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_copy_recv_buff (via Veneer)
<LI><a href="#[2a4cf78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_init (via Veneer)
<LI><a href="#[2ad69c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_byte_present (via Veneer)
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv (via Veneer)
<LI><a href="#[2b17dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_inactivity_timer (via Veneer)
<LI><a href="#[2c44a50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fl_EraseLastSector (via Veneer)
<LI><a href="#[2c44a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fl_ProgramLastSector (via Veneer)
<LI><a href="#[2c56850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateTrap (via Veneer)
<LI><a href="#[2ce3de0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_reading (via Veneer)
</UL>

<P><STRONG><a name="[2e19610]"></a>__ARM_disable_irq</STRONG> (ARM, 16 bytes, Stack size 0 bytes, irq.o(i.__ARM_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[292d880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFlashCommand (via Veneer)
</UL>

<P><STRONG><a name="[2e19580]"></a>__ARM_enable_irq</STRONG> (ARM, 16 bytes, Stack size 0 bytes, irq.o(i.__ARM_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[292d880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFlashCommand (via Veneer)
</UL>

<P><STRONG><a name="[d33238]"></a>Undef_Wrapper</STRONG> (ARM, 0 bytes, Stack size unknown bytes, handlers.o(int_handlers))
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[d332c8]"></a>PAbt_Wrapper</STRONG> (ARM, 0 bytes, Stack size unknown bytes, handlers.o(int_handlers))
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[d333e8]"></a>DAbt_Wrapper</STRONG> (ARM, 0 bytes, Stack size unknown bytes, handlers.o(int_handlers))
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[d33280]"></a>SWI_Wrapper</STRONG> (ARM, 0 bytes, Stack size unknown bytes, handlers.o(int_handlers))
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[d33310]"></a>IRQ_Wrapper</STRONG> (ARM, 0 bytes, Stack size unknown bytes, handlers.o(int_handlers))
<BR><BR>[Calls]<UL><LI><a href="#[d32f80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_ack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[d333a0]"></a>FIQ_Wrapper</STRONG> (ARM, 0 bytes, Stack size unknown bytes, handlers.o(int_handlers))
<BR>[Address Reference Count : 1]<UL><LI> lpc2300.o(RESET)
</UL>
<P><STRONG><a name="[2e144f8]"></a>_get_lc_ctype</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[2e138b8]"></a>_fp_init</STRONG> (ARM, 24 bytes, Stack size 8 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _fp_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e13120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_fp_status_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[2e13870]"></a>__fplib_config_pureend_doubles</STRONG> (ARM, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d32f80]"></a>irq_ack</STRONG> (ARM, 0 bytes, Stack size unknown bytes, handlers.o(int_handlers))
<BR><BR>[Called By]<UL><LI><a href="#[d33310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ_Wrapper
</UL>
<BR>[Address Reference Count : 1]<UL><LI> handlers.o(int_handlers)
</UL>
<P><STRONG><a name="[d2a090]"></a>find_my_socket</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = find_my_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[d2a048]"></a>find_remote_UDP_socket</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, callback.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = find_remote_UDP_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d24330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_server_idle
</UL>

<P><STRONG><a name="[292d880]"></a>fnFlashCommand</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, utasker_lpc23xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = fnFlashCommand
</UL>
<BR>[Calls]<UL><LI><a href="#[292d838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnGetFlashSector
<LI><a href="#[2e19580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_enable_irq (via Veneer)
<LI><a href="#[2e19610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_disable_irq (via Veneer)
<LI><a href="#[2e19b20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r4
</UL>
<BR>[Called By]<UL><LI><a href="#[292e1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnWriteBytesFlash
<LI><a href="#[292e278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnEraseFlashSector
</UL>

<P><STRONG><a name="[292d838]"></a>fnGetFlashSector</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, utasker_lpc23xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[292d880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fnFlashCommand
</UL>

<P><STRONG><a name="[2878b68]"></a>mn_arp_search_entry</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mn_arp_search_entry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2877380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_lookup
<LI><a href="#[28774a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_update
</UL>

<P><STRONG><a name="[2878b20]"></a>mn_arp_get_entry</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = mn_arp_get_entry &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[28772a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_get_timer_tick
</UL>
<BR>[Called By]<UL><LI><a href="#[28774a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_update
</UL>

<P><STRONG><a name="[2878ad8]"></a>mn_arp_send_request</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, arp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = mn_arp_send_request &rArr; mn_close_packet &rArr; lpc2368_send &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[2877020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_arp_packet
<LI><a href="#[2877068]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_transmit_ready
<LI><a href="#[28770f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_byte
<LI><a href="#[28772f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[2877380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_arp_lookup
</UL>

<P><STRONG><a name="[2872760]"></a>find_tag_type</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2872568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_dns_addr
<LI><a href="#[28725b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_server_id
<LI><a href="#[28725f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_type
<LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
</UL>

<P><STRONG><a name="[2872718]"></a>set_client_id</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2872688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcp_packet
</UL>

<P><STRONG><a name="[28726d0]"></a>set_lease_time</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2872688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcp_packet
</UL>

<P><STRONG><a name="[2872688]"></a>make_dhcp_packet</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = make_dhcp_packet &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[28724d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_param_list
<LI><a href="#[2872520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_server_id
<LI><a href="#[28726d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lease_time
<LI><a href="#[2872718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_client_id
<LI><a href="#[28772a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_get_timer_tick
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
</UL>

<P><STRONG><a name="[2872640]"></a>mn_dhcp_xchg_packet</STRONG> (Thumb, 634 bytes, Stack size 80 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840 + Unknown Stack Size
<LI>Call Chain = mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2870d38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_wait
<LI><a href="#[2872568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_dns_addr
<LI><a href="#[28725b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_server_id
<LI><a href="#[28725f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_msg_type
<LI><a href="#[2872688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcp_packet
<LI><a href="#[2872760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tag_type
<LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[28771d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open_socket
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[28c17f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_wait_ticks
<LI><a href="#[28cfda8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_send
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2870e10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_renew
<LI><a href="#[2870e58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_release
<LI><a href="#[28c1918]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_start
</UL>

<P><STRONG><a name="[28725f8]"></a>get_msg_type</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_msg_type
</UL>
<BR>[Calls]<UL><LI><a href="#[2872760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tag_type
</UL>
<BR>[Called By]<UL><LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
</UL>

<P><STRONG><a name="[28725b0]"></a>copy_server_id</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_server_id
</UL>
<BR>[Calls]<UL><LI><a href="#[2872760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tag_type
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
</UL>

<P><STRONG><a name="[2872568]"></a>copy_dns_addr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_dns_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[2872760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tag_type
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2872640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_dhcp_xchg_packet
</UL>

<P><STRONG><a name="[2872520]"></a>set_server_id</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, dhcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = set_server_id
</UL>
<BR>[Called By]<UL><LI><a href="#[2872688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcp_packet
</UL>

<P><STRONG><a name="[28724d8]"></a>set_param_list</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dhcp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2872688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_dhcp_packet
</UL>

<P><STRONG><a name="[286f340]"></a>sendHWAddr</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sendHWAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[28770f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[286dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ether_start_packet
<LI><a href="#[2877020]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_arp_packet
</UL>

<P><STRONG><a name="[286f2f8]"></a>same_net_number</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, ethernet.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = same_net_number
</UL>
<BR>[Called By]<UL><LI><a href="#[286dc78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ether_start_packet
</UL>

<P><STRONG><a name="[28672c0]"></a>http_clear_in_use_flag</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = http_clear_in_use_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[28620a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_server_send
</UL>

<P><STRONG><a name="[2867278]"></a>process_get_func</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = process_get_func &rArr; mn_gf_get_entry &rArr; mn_stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2861cf8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_gf_get_entry
<LI><a href="#[28cff10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_memcpy_cb
<LI><a href="#[2e19cd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[2867230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_include_char
</UL>

<P><STRONG><a name="[2867230]"></a>process_include_char</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = process_include_char &rArr; process_get_func &rArr; mn_gf_get_entry &rArr; mn_stricmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2867278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_get_func
</UL>
<BR>[Called By]<UL><LI><a href="#[d23c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_includes
</UL>

<P><STRONG><a name="[28671e8]"></a>copy_leftovers</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = copy_leftovers
</UL>
<BR>[Called By]<UL><LI><a href="#[d23c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_process_includes
</UL>

<P><STRONG><a name="[28671a0]"></a>MakeHTTPHeader</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, http.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = MakeHTTPHeader &rArr; mn_ustoa
</UL>
<BR>[Calls]<UL><LI><a href="#[2861b48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ustoa
<LI><a href="#[2861bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_stricmp_cb
<LI><a href="#[2861c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strcpy_cb
<LI><a href="#[2861c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strcat_cb
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2861ea8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_http_set_file
</UL>

<P><STRONG><a name="[28557a0]"></a>get_ping_pkt</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = get_ping_pkt &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28771d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open_socket
<LI><a href="#[2877260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_discard_packet
<LI><a href="#[2a3f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_escaped_byte
<LI><a href="#[2e1c778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3f268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_recv
</UL>

<P><STRONG><a name="[2855758]"></a>ip_recv_header</STRONG> (Thumb, 564 bytes, Stack size 64 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = ip_recv_header &rArr; mn_recv_escaped_byte &rArr; mn_recv_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_escaped_byte
<LI><a href="#[2a3f2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_header_checksum
<LI><a href="#[2e1c028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4 (via Veneer)
<LI><a href="#[2e1cae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2877218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_get_pkt
</UL>

<P><STRONG><a name="[2855710]"></a>reset_recv</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = reset_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[285bad0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[2877218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_get_pkt
<LI><a href="#[2877260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_discard_packet
</UL>

<P><STRONG><a name="[28556c8]"></a>send_ping_reply</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, ip.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340 + Unknown Stack Size
<LI>Call Chain = send_ping_reply &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28772f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_packet
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[2a3f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_escaped_byte
<LI><a href="#[2a3f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_send_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3f268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_recv
</UL>

<P><STRONG><a name="[2a38dd0]"></a>mii_read</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lpc23xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mii_read &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[286dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_init
<LI><a href="#[2a38d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
</UL>

<P><STRONG><a name="[2a38d88]"></a>mii_write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lpc23xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = mii_write &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2a38d40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_init
</UL>

<P><STRONG><a name="[2a38d40]"></a>phy_init</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, lpc23xx_eth.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = phy_init &rArr; mii_read &rArr; mn_reset_timer &rArr; mn_get_timer_tick
</UL>
<BR>[Calls]<UL><LI><a href="#[28770b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_timer_expired
<LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[28c17f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_wait_ticks
<LI><a href="#[2a38d88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mii_write
<LI><a href="#[2a38dd0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mii_read
</UL>
<BR>[Called By]<UL><LI><a href="#[286dc30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_init
</UL>

<P><STRONG><a name="[2a38cf8]"></a>ReleaseRxDescriptor</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc23xx_eth.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3f190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpc2368_recv
</UL>

<P><STRONG><a name="[2adde20]"></a>mn_tolower</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mnstring.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2861b90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strnicmp_cb
<LI><a href="#[2861bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_stricmp_cb
<LI><a href="#[2adc758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strnicmp
<LI><a href="#[2adc7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_stricmp
</UL>

<P><STRONG><a name="[2ad4838]"></a>smtp_wait_reply</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1832 + Unknown Stack Size
<LI>Call Chain = smtp_wait_reply &rArr; mn_do_multi_line &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad2f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv
<LI><a href="#[2ad2f78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_get_reply_code
<LI><a href="#[2ad3008]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_do_multi_line
</UL>
<BR>[Called By]<UL><LI><a href="#[28a0b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_start_session
<LI><a href="#[28a0bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_send_mail
<LI><a href="#[28a0c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_end_session
</UL>

<P><STRONG><a name="[2ad47f0]"></a>smtp_send_cmd</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = smtp_send_cmd &rArr; mn_recv &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strcpy_cb
<LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[2ad2f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv
<LI><a href="#[2ad4688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_send
</UL>
<BR>[Called By]<UL><LI><a href="#[28a0b70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_start_session
<LI><a href="#[28a0bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_send_mail
<LI><a href="#[28a0c00]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_end_session
</UL>

<P><STRONG><a name="[2ad47a8]"></a>smtp_empty_buff</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = smtp_empty_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5dfe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send
</UL>
<BR>[Called By]<UL><LI><a href="#[28a0bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_send_mail
</UL>

<P><STRONG><a name="[2ad4760]"></a>smtp_load_buff_cb</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = smtp_load_buff_cb &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2861c20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strcpy_cb
<LI><a href="#[2861c68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strcat_cb
<LI><a href="#[2a5dfe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send
<LI><a href="#[2adc7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_strlen_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[28a0bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_send_mail
</UL>

<P><STRONG><a name="[2ad4718]"></a>smtp_send_body</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = smtp_send_body &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5dfe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send
<LI><a href="#[2ad2f30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv
<LI><a href="#[2ad4688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_send
</UL>
<BR>[Called By]<UL><LI><a href="#[28a0bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_send_mail
</UL>

<P><STRONG><a name="[2ad46d0]"></a>smtp_load_buff</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = smtp_load_buff &rArr; mn_send &rArr; mn_dhcp_renew &rArr; mn_dhcp_xchg_packet &rArr; mn_recv_wait &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5dfe0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send
<LI><a href="#[2e1b478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[28a0bb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_smtp_send_mail
</UL>

<P><STRONG><a name="[2ad4688]"></a>set_send</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smtp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_send &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad4718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_body
<LI><a href="#[2ad47f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtp_send_cmd
</UL>

<P><STRONG><a name="[2b3e740]"></a>tcp_send_header</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356 + Unknown Stack Size
<LI>Call Chain = tcp_send_header &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2a30ce0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_tcp_start_checksum
<LI><a href="#[2a3f028]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_tcp_end_checksum
<LI><a href="#[2a3f0b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_send_escaped_byte
<LI><a href="#[2a3f148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_data_send_checksum
<LI><a href="#[2a3f2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_send_header
</UL>
<BR>[Called By]<UL><LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[2b3e590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_nodata_hdr
</UL>

<P><STRONG><a name="[2b3e6f8]"></a>tcp_send_syn_close</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = tcp_send_syn_close &rArr; tcp_send_nodata_hdr &rArr; tcp_send_header &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2877140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_timer
<LI><a href="#[28772f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_packet
<LI><a href="#[2b3e590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_nodata_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
<LI><a href="#[2b17c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_open
</UL>

<P><STRONG><a name="[2b3e6b0]"></a>tcp_send_ack</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = tcp_send_ack &rArr; tcp_send_nodata_hdr &rArr; tcp_send_header &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28772f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_packet
<LI><a href="#[2b3e590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_nodata_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
</UL>

<P><STRONG><a name="[2b3e668]"></a>find_tcp_socket</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = find_tcp_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d23cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_find_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3e620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_recv_header
</UL>

<P><STRONG><a name="[2b3e620]"></a>tcp_recv_header</STRONG> (Thumb, 706 bytes, Stack size 96 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = tcp_recv_header &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d23cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_find_socket
<LI><a href="#[28771d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_open_socket
<LI><a href="#[2877338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_abort
<LI><a href="#[2a3f100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_recv_escaped_byte
<LI><a href="#[2b17dd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_reset_inactivity_timer
<LI><a href="#[2b17e20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_get_socket_type
<LI><a href="#[2b3e668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_tcp_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
</UL>

<P><STRONG><a name="[2b3e5d8]"></a>tcp_recv_send</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1744 + Unknown Stack Size
<LI>Call Chain = tcp_recv_send &rArr; mn_tcp_recv &rArr; mn_app_process_packet &rArr; mn_port2002_process_packet &rArr; flash_write_default &rArr; write_all &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[2a3f268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_ip_recv
<LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[2b17c28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_shutdown
<LI><a href="#[2b17c70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_open
</UL>

<P><STRONG><a name="[2b3e590]"></a>tcp_send_nodata_hdr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364 + Unknown Stack Size
<LI>Call Chain = tcp_send_nodata_hdr &rArr; tcp_send_header &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3e740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_header
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3e548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_nodata_pkt
<LI><a href="#[2b3e6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_ack
<LI><a href="#[2b3e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_syn_close
</UL>

<P><STRONG><a name="[2b3e548]"></a>tcp_send_nodata_pkt</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = tcp_send_nodata_pkt &rArr; tcp_send_nodata_hdr &rArr; tcp_send_header &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[28772f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_close_packet
<LI><a href="#[2b3e590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_nodata_hdr
</UL>
<BR>[Called By]<UL><LI><a href="#[28cfdf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_send
<LI><a href="#[28cfe38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_close
<LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
<LI><a href="#[2b3e4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_reset
</UL>

<P><STRONG><a name="[2b3e500]"></a>update_unacked_bytes</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = update_unacked_bytes &rArr; mn_app_send_complete
</UL>
<BR>[Calls]<UL><LI><a href="#[d24450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_app_send_complete
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
</UL>

<P><STRONG><a name="[2b3e4b8]"></a>tcp_send_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tcp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372 + Unknown Stack Size
<LI>Call Chain = tcp_send_reset &rArr; tcp_send_nodata_pkt &rArr; tcp_send_nodata_hdr &rArr; tcp_send_header &rArr; mn_ip_send_header &rArr; mn_ip_start_packet &rArr; mn_ether_start_packet &rArr; mn_arp_lookup &rArr; mn_ip_get_pkt &rArr; ether_recv_header &rArr; mn_arp_process_packet &rArr; mn_open_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3e548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tcp_send_nodata_pkt
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf908]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_tcp_recv
</UL>

<P><STRONG><a name="[2b32088]"></a>find_udp_socket</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, udp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = find_udp_socket &rArr; mn_find_socket &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d23cb8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_find_socket
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf8c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_udp_recv
</UL>

<P><STRONG><a name="[2acf058]"></a>set_vf_entry</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, vfile.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = set_vf_entry &rArr; mn_stricmp_cb
</UL>
<BR>[Calls]<UL><LI><a href="#[2861bd8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_stricmp_cb
<LI><a href="#[2e1bd78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[289a2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_set_entry
<LI><a href="#[2acda68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_vf_set_ram_entry
</UL>

<P><STRONG><a name="[2c5fe90]"></a>ucCheckCommunity</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, snmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ucCheckCommunity &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5e5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthSnmpIn
<LI><a href="#[2e1b9f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2adf950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_SNMP
</UL>

<P><STRONG><a name="[2c5fe48]"></a>ucCheckVersion</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, snmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2adf950]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_SNMP
</UL>

<P><STRONG><a name="[2c5ca58]"></a>getErrorV1</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, snmpresponse.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = getErrorV1
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5b348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;incOut
<LI><a href="#[2c5e5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthSnmpIn
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5e540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucGetResponse
</UL>

<P><STRONG><a name="[2c56850]"></a>generateTrap</STRONG> (Thumb, 518 bytes, Stack size 104 bytes, snmptrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = generateTrap &rArr; ucMoveOidVariableToOutput &rArr; ucFindOID &rArr; getLengthVBTable
</UL>
<BR>[Calls]<UL><LI><a href="#[d241c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Enable_Interrupts (via Veneer)
<LI><a href="#[d24210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;K_OS_Disable_Interrupts (via Veneer)
<LI><a href="#[2c567c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEnterprise
<LI><a href="#[2c56808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SNMPsetIP
<LI><a href="#[2c5b2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMoveOidVariableToOutput
<LI><a href="#[2c5e588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setOutSeqLen
</UL>
<BR>[Called By]<UL><LI><a href="#[28abb58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mn_snmp_trap
</UL>

<P><STRONG><a name="[2c56808]"></a>SNMPsetIP</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, snmptrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SNMPsetIP
</UL>
<BR>[Called By]<UL><LI><a href="#[2c56850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateTrap
</UL>

<P><STRONG><a name="[2c567c0]"></a>setEnterprise</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, snmptrap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setEnterprise
</UL>
<BR>[Calls]<UL><LI><a href="#[2d853b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVBTableByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c56850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generateTrap
</UL>

<P><STRONG><a name="[2c53728]"></a>ucFindOID</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, snmputil.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ucFindOID &rArr; getLengthVBTable
</UL>
<BR>[Calls]<UL><LI><a href="#[2c551d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getLengthVBTable
<LI><a href="#[2d853b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVBTableByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5b2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucMoveOidVariableToOutput
<LI><a href="#[2c5b300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ucCheckSetVariables
<LI><a href="#[2c5b390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetVariables
</UL>

<P><STRONG><a name="[2e1b1a8]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1aff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2e1b160]"></a>__arm_div4</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1aff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2e1b118]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e1aff8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[2e174a0]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2e156e0]"></a>__ARM_exceptions_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e15698]"></a>__Heap_DescSize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e15650]"></a>__alloca_initialize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e15608]"></a>__cpp_initialize__aeabi_</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e155c0]"></a>__cxa_finalize</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e15770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[2e1a228]"></a>__user_heap_extend</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1a300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_extend (Weak Reference)
</UL>

<P><STRONG><a name="[2e15578]"></a>_atexit_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e15e88]"></a>_call_atexit_fns</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e15f18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (Weak Reference)
</UL>

<P><STRONG><a name="[2e15530]"></a>_clock_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e154e8]"></a>_fp_trap_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e154a0]"></a>_get_lc_collate</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e15458]"></a>_get_lc_monetary</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e15410]"></a>_get_lc_numeric</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e153c8]"></a>_get_lc_time</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e15380]"></a>_getenv_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e15338]"></a>_init_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e152f0]"></a>_init_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e152a8]"></a>_initio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e1e590]"></a>_printf_charcount</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[2e1e548]"></a>_printf_fp_dec</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[2e1e500]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[2e1e4b8]"></a>_printf_longlong_dec</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[2e1e470]"></a>_printf_longlong_oct</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[2e1e428]"></a>_printf_mbtowc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[2e1da50]"></a>_printf_truncate_signed</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1dae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (Weak Reference)
</UL>

<P><STRONG><a name="[2e1dc60]"></a>_printf_truncate_unsigned</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1dae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (Weak Reference)
<LI><a href="#[2e1dcf0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex (Weak Reference)
</UL>

<P><STRONG><a name="[2e1e3e0]"></a>_printf_wc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[2e1e398]"></a>_printf_wctomb</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED, UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1e6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (Weak Reference)
</UL>

<P><STRONG><a name="[2e15260]"></a>_rand_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e16380]"></a>_scanf_longlong</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e163c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf (Weak Reference)
</UL>

<P><STRONG><a name="[2e16338]"></a>_scanf_mbtowc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e163c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf (Weak Reference)
</UL>

<P><STRONG><a name="[2e162f0]"></a>_scanf_real</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e163c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf (Weak Reference)
</UL>

<P><STRONG><a name="[2e162a8]"></a>_scanf_string</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e163c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf (Weak Reference)
</UL>

<P><STRONG><a name="[2e16260]"></a>_scanf_wctomb</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e163c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf (Weak Reference)
</UL>

<P><STRONG><a name="[2e16218]"></a>_scanf_wstring</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e163c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf (Weak Reference)
</UL>

<P><STRONG><a name="[2e15218]"></a>_signal_init</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e157b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (Weak Reference)
</UL>

<P><STRONG><a name="[2e151d0]"></a>_terminate_user_alloc</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e15770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>

<P><STRONG><a name="[2e15188]"></a>_terminateio</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[2e15770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
</UL>
<HR></body></html>
