


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; interrupt handlers
    3 00000000         ;*/
    4 00000000         
    5 00000000         ;  SOME CPU RELATED DEFINITIONS
    6 00000000         ;
    7 00000000 0000001F 
                       Mode_Mask
                               EQU              0x1F        ; Mask for CPU mode
                                                             bits
    8 00000000 00000010 
                       Mode_USR
                               EQU              0x10
    9 00000000 00000011 
                       Mode_FIQ
                               EQU              0x11
   10 00000000 00000012 
                       Mode_IRQ
                               EQU              0x12
   11 00000000 00000013 
                       Mode_SVC
                               EQU              0x13
   12 00000000 00000017 
                       Mode_ABT
                               EQU              0x17
   13 00000000 0000001B 
                       Mode_UND
                               EQU              0x1B
   14 00000000 0000001F 
                       Mode_SYS
                               EQU              0x1F
   15 00000000         
   16 00000000 00000020 
                       T_Bit   EQU              0x20        ; THUMB mode bit
   17 00000000 00000080 
                       I_Bit   EQU              0x80
   18 00000000 00000040 
                       F_Bit   EQU              0x40
   19 00000000 000000C0 
                       Int_Bits
                               EQU              (I_Bit+F_Bit) ; IRQ+FIQ disable
                                                             bits
   20 00000000         
   21 00000000         ; special SWI for CMX
   22 00000000 000000FF 
                       SWI_SVC_Mode
                               EQU              0xFF        ; SWI to switch to 
                                                            SVC mode
   23 00000000         
   24 00000000         ; The following are for the LPC2368
   25 00000000 FFFFF000 
                       VIC_BASE
                               EQU              0xFFFFF000
   26 00000000 00000F00 
                       VIC_ADDR
                               EQU              0xF00
   27 00000000         
   28 00000000         ; ------------------------------------------------------
                       --------------------



ARM Macro Assembler    Page 2 


   29 00000000         
   30 00000000                 IF               :DEF:CS_RTOS
   33                          ENDIF
   34 00000000         
   35 00000000                 EXPORT           Undef_Wrapper
   36 00000000                 EXPORT           SWI_Wrapper
   37 00000000                 EXPORT           PAbt_Wrapper
   38 00000000                 EXPORT           DAbt_Wrapper
   39 00000000                 EXPORT           IRQ_Wrapper
   40 00000000                 EXPORT           FIQ_Wrapper
   41 00000000         
   42 00000000                 PRESERVE8
   43 00000000                 AREA             |int_handlers|, CODE, READONLY
   44 00000000                 ARM
   45 00000000         
   46 00000000         ; The exception handlers use C functions found in cmx_is
                       rs.c. It is up
   47 00000000         ; to the user to add code to those functions. Except for
                        the SWI handler
   48 00000000         ; The handlers use the int_count variable and the CMX in
                       terrupt exit so
   49 00000000         ; CMX interrupt-safe routines can be called from the C H
                       andlers.
   50 00000000         
   51 00000000         ;
   52 00000000         ; Undefined Instruction  (regs=und)
   53 00000000         ;
   54 00000000                 IMPORT           cmx_undef
   55 00000000         Undef_Wrapper
   56 00000000 E92D5FFF        STMFD            SP!,{R0-R12,LR} ; save the regi
                                                            sters
   57 00000004 E14F9000        MRS              R9,SPSR     ; save the SPSR
   58 00000008 E92D0200        STMFD            SP!,{R9}
   59 0000000C                 IF               :DEF:CS_RTOS
   73 0000000C E59F0114        ldr              r0,=cmx_undef
   74 00000010 E1A0E00F        mov              lr,pc
   75 00000014 E12FFF10        BX               R0
   76 00000018 E8BD0010        LDMFD            SP!,{R4}
   77 0000001C E16FF004        MSR              SPSR_cxsf,R4 ; restore SPSR
   78 00000020 E8FD9FFF        LDMFD            SP!,{R0-R12,PC}^ ; restore regs
                                                             and return
   79 00000024                 ENDIF
   80 00000024         
   81 00000024         ;
   82 00000024         ; Prefetch Exception
   83 00000024         ;
   84 00000024                 IMPORT           cmx_prefetch
   85 00000024         PAbt_Wrapper
   86 00000024 E24EE004        SUB              LR,LR,#4    ; adj for proper CM
                                                            X return
   87 00000028 E92D5FFF        STMFD            SP!,{R0-R12,LR} ; save the regi
                                                            sters
   88 0000002C E14F9000        MRS              R9,SPSR     ; save the SPSR
   89 00000030 E92D0200        STMFD            SP!,{R9}
   90 00000034                 IF               :DEF:CS_RTOS
  104 00000034 E59F00F0        ldr              r0,=cmx_prefetch
  105 00000038 E1A0E00F        mov              lr,pc
  106 0000003C E12FFF10        BX               R0
  107 00000040 E8BD0010        LDMFD            SP!,{R4}



ARM Macro Assembler    Page 3 


  108 00000044 E16FF004        MSR              SPSR_cxsf,R4 ; restore SPSR
  109 00000048 E8FD9FFF        LDMFD            SP!,{R0-R12,PC}^ ; restore regs
                                                             and return
  110 0000004C                 ENDIF
  111 0000004C         
  112 0000004C         ;
  113 0000004C         ; Data Abort Exception
  114 0000004C         ;
  115 0000004C                 IMPORT           cmx_abort
  116 0000004C         DAbt_Wrapper
  117 0000004C E24EE008        SUB              LR,LR,#8    ; adj for proper CM
                                                            X return
  118 00000050 E92D5FFF        STMFD            SP!,{R0-R12,LR} ; save the regi
                                                            sters
  119 00000054 E14F9000        MRS              R9,SPSR     ; save the SPSR
  120 00000058 E92D0200        STMFD            SP!,{R9}
  121 0000005C                 IF               :DEF:CS_RTOS
  135 0000005C E59F00CC        ldr              r0,=cmx_abort
  136 00000060 E1A0E00F        mov              lr,pc
  137 00000064 E12FFF10        BX               R0
  138 00000068 E8BD0010        LDMFD            SP!,{R4}
  139 0000006C E16FF004        MSR              SPSR_cxsf,R4 ; restore SPSR
  140 00000070 E8FD9FFF        LDMFD            SP!,{R0-R12,PC}^ ; restore regs
                                                             and return
  141 00000074                 ENDIF
  142 00000074         
  143 00000074         ;
  144 00000074         ; Software Interrupt
  145 00000074         ;
  146 00000074         ;  The handler calls the C Handler in cmx_isrs.c with th
                       e parameter being
  147 00000074         ;  the SWI number. The SWI will ultimately return in the
                        same processor mode
  148 00000074         ;  that it was originally called in. 
  149 00000074         ;
  150 00000074                 IMPORT           cmx_swi
  151 00000074         SWI_Wrapper
  152 00000074 E92D5FFF        STMFD            SP!,{R0-R12,LR} ; save regs
  153 00000078 E14F4000        MRS              R4,SPSR     ; save SPSR
  154 0000007C E92D0010        STMFD            SP!,{R4}
  155 00000080 E3140020        TST              R4,#T_Bit   ; SWI from Thumb mo
                                                            de?
  156 00000084 051E0004        LDREQ            R0,[LR,#-4] ; get ARM SWI #
  157 00000088 03C004FF        BICEQ            R0,R0,#0xFF000000 ; mask off th
                                                            e instruction part
  158 0000008C 115E00B2        LDRNEH           R0,[LR,#-2] ; get Thumb SWI #
  159 00000090 13C00CFF        BICNE            R0,R0,#0x0000FF00 ; mask off th
                                                            e instruction part
  160 00000094 E35000FF        CMP              R0,#SWI_SVC_Mode ; is this SVC 
                                                            mode call?
  161 00000098 1A000003        BNE              %1          ; if not, skip forw
                                                            ard
  162 0000009C E3C4401F        BIC              R4,R4,#Mode_Mask ; else, set to
                                                             SPSR to SVC mode
  163 000000A0 E3844013        ORR              R4,R4,#Mode_SVC
  164 000000A4 E58D4000        STR              R4,[SP]
  165 000000A8 EA000002        B                %2          ; goto restore and 
                                                            return
  166 000000AC         1



ARM Macro Assembler    Page 4 


  167 000000AC E59F5080        ldr              r5,=cmx_swi
  168 000000B0 E1A0E00F        mov              lr,pc
  169 000000B4 E12FFF15        bx               r5
  170 000000B8         
  171 000000B8         2
  172 000000B8 E8BD0010        LDMFD            SP!,{R4}    ; restore and retur
                                                            n
  173 000000BC E16FF004        MSR              SPSR_cxsf,R4 ; restore SPSR
  174 000000C0 E8FD9FFF        LDMFD            SP!,{R0-R12,PC}^ ; restore regs
                                                             and return
  175 000000C4         
  176 000000C4         ;
  177 000000C4         ; IRQ Interrupt
  178 000000C4         ;
  179 000000C4         
  180 000000C4         IRQ_Wrapper
  181 000000C4 E24EE004        SUB              LR,LR,#4    ; adj for proper CM
                                                            X return
  182 000000C8 E92D5FFF        STMFD            SP!,{R0-R12,LR} ; save the regi
                                                            sters
  183 000000CC E14F9000        MRS              R9,SPSR     ; get the SPSR
  184 000000D0 E92D0200        STMFD            SP!,{R9}    ; save the SPSR
  185 000000D4         
  186 000000D4                 IF               :DEF:CS_RTOS
  196                          ENDIF
  197 000000D4         
  198 000000D4 E59FC05C        ldr              r12, =VIC_BASE ; get the addres
                                                            s of the handler
  199 000000D8 E59C0F00        ldr              r0, [r12, #VIC_ADDR]
  200 000000DC E3500000        cmp              r0, #0      ; handler available
                                                            ?
  201 000000E0 0A000001        beq              irq_ack     ; no, ack interrupt
                                                             and exit
  202 000000E4         
  203 000000E4 E59FE050        LDR              LR,=irq_ack
  204 000000E8 E12FFF10        bx               r0
  205 000000EC         
  206 000000EC         irq_ack
  207 000000EC         ; ACK the interrupt
  208 000000EC E59FC044        ldr              r12, =VIC_BASE
  209 000000F0 E58C0F00        str              r0, [r12, #VIC_ADDR]
  210 000000F4         
  211 000000F4                 IF               :DEF:CS_RTOS
  214 000000F4 E8BD0010        LDMFD            SP!,{R4}
  215 000000F8 E16FF004        MSR              SPSR_cxsf,R4 ; restore SPSR
  216 000000FC E8FD9FFF        LDMFD            SP!,{R0-R12,PC}^ ; restore regs
                                                             and return
  217 00000100                 ENDIF
  218 00000100         
  219 00000100         ;
  220 00000100         ; Fast FIQ Interrupt
  221 00000100         ;
  222 00000100                 IMPORT           cmx_fiq
  223 00000100         FIQ_Wrapper
  224 00000100 E24EE004        SUB              LR,LR,#4    ; adj for proper CM
                                                            X return
  225 00000104 E92D5FFF        STMFD            SP!,{R0-R12,LR} ; save the regi
                                                            sters
  226 00000108 E14F9000        MRS              R9,SPSR     ; get the SPSR



ARM Macro Assembler    Page 5 


  227 0000010C E92D0200        STMFD            SP!,{R9}    ; save the SPSR
  228 00000110                 IF               :DEF:CS_RTOS
  257 00000110 E59F0028        ldr              r0,=cmx_fiq
  258 00000114 E1A0E00F        mov              lr,pc
  259 00000118 E12FFF10        BX               R0
  260 0000011C E8BD0010        LDMFD            SP!,{R4}
  261 00000120 E16FF004        MSR              SPSR_cxsf,R4 ; restore SPSR
  262 00000124 E8FD9FFF        LDMFD            SP!,{R0-R12,PC}^ ; restore regs
                                                             and return
  263 00000128                 ENDIF
  264 00000128         
  265 00000128                 END
              00000000 
              00000000 
              00000000 
              00000000 
              FFFFF000 
              00000000 
              00000000 
Command Line: --16 --debug --xref --device=DARMP --apcs=interwork -o.\Objects\H
ANDLERS.o -IC:\Keil\ARM\INC\Philips --predefine="__THUMB_LIBRARY__ SETA 1" --li
st=.\Listing\HANDLERS.lst HANDLERS.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

 000000AC

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
 000000B8

Symbol: 
   Definitions
      None
   Uses
      None
Warning:  undefinedComment:  unused
DAbt_Wrapper 0000004C

Symbol: DAbt_Wrapper
   Definitions
      At line 116 in file HANDLERS.s
   Uses
      At line 38 in file HANDLERS.s
Comment: DAbt_Wrapper used once
FIQ_Wrapper 00000100

Symbol: FIQ_Wrapper
   Definitions
      At line 223 in file HANDLERS.s
   Uses
      At line 40 in file HANDLERS.s
Comment: FIQ_Wrapper used once
IRQ_Wrapper 000000C4

Symbol: IRQ_Wrapper
   Definitions
      At line 180 in file HANDLERS.s
   Uses
      At line 39 in file HANDLERS.s
Comment: IRQ_Wrapper used once
PAbt_Wrapper 00000024

Symbol: PAbt_Wrapper
   Definitions
      At line 85 in file HANDLERS.s
   Uses
      At line 37 in file HANDLERS.s
Comment: PAbt_Wrapper used once
SWI_Wrapper 00000074

Symbol: SWI_Wrapper
   Definitions
      At line 151 in file HANDLERS.s
   Uses
      At line 36 in file HANDLERS.s
Comment: SWI_Wrapper used once
Undef_Wrapper 00000000

Symbol: Undef_Wrapper



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 55 in file HANDLERS.s
   Uses
      At line 35 in file HANDLERS.s
Comment: Undef_Wrapper used once
int_handlers 00000000

Symbol: int_handlers
   Definitions
      At line 43 in file HANDLERS.s
   Uses
      None
Comment: int_handlers unused
irq_ack 000000EC

Symbol: irq_ack
   Definitions
      At line 206 in file HANDLERS.s
   Uses
      At line 201 in file HANDLERS.s
      At line 203 in file HANDLERS.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.debug_info$$$int_handlers 00000000

Symbol: .debug_info$$$int_handlers
   Definitions
      None
   Uses
      None
Warning: .debug_info$$$int_handlers undefinedComment: .debug_info$$$int_handler
s unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.debug_line$$$int_handlers 00000000

Symbol: .debug_line$$$int_handlers
   Definitions
      None
   Uses
      None
Warning: .debug_line$$$int_handlers undefinedComment: .debug_line$$$int_handler
s unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.debug_abbrev 00000000

Symbol: .debug_abbrev
   Definitions
      None
   Uses
      None
Warning: .debug_abbrev undefinedComment: .debug_abbrev unused
__ARM_asm.debug_abbrev 00000000

Symbol: __ARM_asm.debug_abbrev
   Definitions
      None
   Uses
      None
Warning: __ARM_asm.debug_abbrev undefinedComment: __ARM_asm.debug_abbrev unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

F_Bit 00000040

Symbol: F_Bit
   Definitions
      At line 18 in file HANDLERS.s
   Uses
      At line 19 in file HANDLERS.s
Comment: F_Bit used once
I_Bit 00000080

Symbol: I_Bit
   Definitions
      At line 17 in file HANDLERS.s
   Uses
      At line 19 in file HANDLERS.s
Comment: I_Bit used once
Int_Bits 000000C0

Symbol: Int_Bits
   Definitions
      At line 19 in file HANDLERS.s
   Uses
      None
Comment: Int_Bits unused
Mode_ABT 00000017

Symbol: Mode_ABT
   Definitions
      At line 12 in file HANDLERS.s
   Uses
      None
Comment: Mode_ABT unused
Mode_FIQ 00000011

Symbol: Mode_FIQ
   Definitions
      At line 9 in file HANDLERS.s
   Uses
      None
Comment: Mode_FIQ unused
Mode_IRQ 00000012

Symbol: Mode_IRQ
   Definitions
      At line 10 in file HANDLERS.s
   Uses
      None
Comment: Mode_IRQ unused
Mode_Mask 0000001F

Symbol: Mode_Mask
   Definitions
      At line 7 in file HANDLERS.s
   Uses
      At line 162 in file HANDLERS.s
Comment: Mode_Mask used once
Mode_SVC 00000013

Symbol: Mode_SVC



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 11 in file HANDLERS.s
   Uses
      At line 163 in file HANDLERS.s
Comment: Mode_SVC used once
Mode_SYS 0000001F

Symbol: Mode_SYS
   Definitions
      At line 14 in file HANDLERS.s
   Uses
      None
Comment: Mode_SYS unused
Mode_UND 0000001B

Symbol: Mode_UND
   Definitions
      At line 13 in file HANDLERS.s
   Uses
      None
Comment: Mode_UND unused
Mode_USR 00000010

Symbol: Mode_USR
   Definitions
      At line 8 in file HANDLERS.s
   Uses
      None
Comment: Mode_USR unused
SWI_SVC_Mode 000000FF

Symbol: SWI_SVC_Mode
   Definitions
      At line 22 in file HANDLERS.s
   Uses
      At line 160 in file HANDLERS.s
Comment: SWI_SVC_Mode used once
T_Bit 00000020

Symbol: T_Bit
   Definitions
      At line 16 in file HANDLERS.s
   Uses
      At line 155 in file HANDLERS.s
Comment: T_Bit used once
VIC_ADDR 00000F00

Symbol: VIC_ADDR
   Definitions
      At line 26 in file HANDLERS.s
   Uses
      At line 199 in file HANDLERS.s
      At line 209 in file HANDLERS.s

VIC_BASE FFFFF000

Symbol: VIC_BASE
   Definitions
      At line 25 in file HANDLERS.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Uses
      At line 198 in file HANDLERS.s
      At line 208 in file HANDLERS.s

15 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

cmx_abort 00000000

Symbol: cmx_abort
   Definitions
      At line 115 in file HANDLERS.s
   Uses
      At line 135 in file HANDLERS.s
Comment: cmx_abort used once
cmx_fiq 00000000

Symbol: cmx_fiq
   Definitions
      At line 222 in file HANDLERS.s
   Uses
      At line 257 in file HANDLERS.s
Comment: cmx_fiq used once
cmx_prefetch 00000000

Symbol: cmx_prefetch
   Definitions
      At line 84 in file HANDLERS.s
   Uses
      At line 104 in file HANDLERS.s
Comment: cmx_prefetch used once
cmx_swi 00000000

Symbol: cmx_swi
   Definitions
      At line 150 in file HANDLERS.s
   Uses
      At line 167 in file HANDLERS.s
Comment: cmx_swi used once
cmx_undef 00000000

Symbol: cmx_undef
   Definitions
      At line 54 in file HANDLERS.s
   Uses
      At line 73 in file HANDLERS.s
Comment: cmx_undef used once
5 symbols
356 symbols in table
